<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="950" onload="init(evt)" viewBox="0 0 1200 950" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="950" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="933.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="933.00"> </text><svg id="frames" x="10" width="1180" total_samples="3367"><g><title>perf-exec (5 samples, 0.15%)</title><rect x="0.0000%" y="885" width="0.1485%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="895.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.15%)</title><rect x="0.0000%" y="869" width="0.1485%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="879.50"></text></g><g><title>do_syscall_64 (5 samples, 0.15%)</title><rect x="0.0000%" y="853" width="0.1485%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="863.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.15%)</title><rect x="0.0000%" y="837" width="0.1485%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="847.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.15%)</title><rect x="0.0000%" y="821" width="0.1485%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="831.50"></text></g><g><title>bprm_execve (5 samples, 0.15%)</title><rect x="0.0000%" y="805" width="0.1485%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="815.50"></text></g><g><title>load_elf_binary (5 samples, 0.15%)</title><rect x="0.0000%" y="789" width="0.1485%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="799.50"></text></g><g><title>begin_new_exec (5 samples, 0.15%)</title><rect x="0.0000%" y="773" width="0.1485%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>perf_event_exec (5 samples, 0.15%)</title><rect x="0.0000%" y="757" width="0.1485%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.15%)</title><rect x="0.0000%" y="741" width="0.1485%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>native_write_msr (5 samples, 0.15%)</title><rect x="0.0000%" y="725" width="0.1485%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (1 samples, 0.03%)</title><rect x="0.1485%" y="869" width="0.0297%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="1"/><text x="0.3985%" y="879.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (1 samples, 0.03%)</title><rect x="0.1782%" y="869" width="0.0297%" height="15" fill="rgb(216,20,37)" fg:x="6" fg:w="1"/><text x="0.4282%" y="879.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="0.2079%" y="869" width="0.0297%" height="15" fill="rgb(206,188,39)" fg:x="7" fg:w="1"/><text x="0.4579%" y="879.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (1 samples, 0.03%)</title><rect x="0.2376%" y="853" width="0.0297%" height="15" fill="rgb(217,207,13)" fg:x="8" fg:w="1"/><text x="0.4876%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (2 samples, 0.06%)</title><rect x="0.2673%" y="853" width="0.0594%" height="15" fill="rgb(231,73,38)" fg:x="9" fg:w="2"/><text x="0.5173%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (1 samples, 0.03%)</title><rect x="0.3267%" y="853" width="0.0297%" height="15" fill="rgb(225,20,46)" fg:x="11" fg:w="1"/><text x="0.5767%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (12 samples, 0.36%)</title><rect x="0.3564%" y="853" width="0.3564%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="12"/><text x="0.6064%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.33%)</title><rect x="0.7128%" y="853" width="0.3267%" height="15" fill="rgb(221,200,47)" fg:x="24" fg:w="11"/><text x="0.9628%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (2 samples, 0.06%)</title><rect x="1.0395%" y="853" width="0.0594%" height="15" fill="rgb(226,26,5)" fg:x="35" fg:w="2"/><text x="1.2895%" y="863.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (21 samples, 0.62%)</title><rect x="1.0989%" y="853" width="0.6237%" height="15" fill="rgb(249,33,26)" fg:x="37" fg:w="21"/><text x="1.3489%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (4 samples, 0.12%)</title><rect x="1.7226%" y="853" width="0.1188%" height="15" fill="rgb(235,183,28)" fg:x="58" fg:w="4"/><text x="1.9726%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (9 samples, 0.27%)</title><rect x="1.8414%" y="853" width="0.2673%" height="15" fill="rgb(221,5,38)" fg:x="62" fg:w="9"/><text x="2.0914%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (3 samples, 0.09%)</title><rect x="2.1087%" y="853" width="0.0891%" height="15" fill="rgb(247,18,42)" fg:x="71" fg:w="3"/><text x="2.3587%" y="863.50"></text></g><g><title>rust::neuron::Network::step::{{closure}} (7 samples, 0.21%)</title><rect x="2.1978%" y="853" width="0.2079%" height="15" fill="rgb(241,131,45)" fg:x="74" fg:w="7"/><text x="2.4478%" y="863.50"></text></g><g><title>[[heap]] (74 samples, 2.20%)</title><rect x="0.2376%" y="869" width="2.1978%" height="15" fill="rgb(249,31,29)" fg:x="8" fg:w="74"/><text x="0.4876%" y="879.50">[..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="2.4057%" y="853" width="0.0297%" height="15" fill="rgb(225,111,53)" fg:x="81" fg:w="1"/><text x="2.6557%" y="863.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (2 samples, 0.06%)</title><rect x="2.4354%" y="853" width="0.0594%" height="15" fill="rgb(238,160,17)" fg:x="82" fg:w="2"/><text x="2.6854%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (3 samples, 0.09%)</title><rect x="2.4948%" y="853" width="0.0891%" height="15" fill="rgb(214,148,48)" fg:x="84" fg:w="3"/><text x="2.7448%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (3 samples, 0.09%)</title><rect x="2.5839%" y="853" width="0.0891%" height="15" fill="rgb(232,36,49)" fg:x="87" fg:w="3"/><text x="2.8339%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (3 samples, 0.09%)</title><rect x="2.5839%" y="837" width="0.0891%" height="15" fill="rgb(209,103,24)" fg:x="87" fg:w="3"/><text x="2.8339%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (9 samples, 0.27%)</title><rect x="2.6730%" y="853" width="0.2673%" height="15" fill="rgb(229,88,8)" fg:x="90" fg:w="9"/><text x="2.9230%" y="863.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (3 samples, 0.09%)</title><rect x="2.8512%" y="837" width="0.0891%" height="15" fill="rgb(213,181,19)" fg:x="96" fg:w="3"/><text x="3.1012%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (1 samples, 0.03%)</title><rect x="2.9403%" y="853" width="0.0297%" height="15" fill="rgb(254,191,54)" fg:x="99" fg:w="1"/><text x="3.1903%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (3 samples, 0.09%)</title><rect x="2.9700%" y="853" width="0.0891%" height="15" fill="rgb(241,83,37)" fg:x="100" fg:w="3"/><text x="3.2200%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.33%)</title><rect x="3.0591%" y="853" width="0.3267%" height="15" fill="rgb(233,36,39)" fg:x="103" fg:w="11"/><text x="3.3091%" y="863.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (2 samples, 0.06%)</title><rect x="3.3858%" y="853" width="0.0594%" height="15" fill="rgb(226,3,54)" fg:x="114" fg:w="2"/><text x="3.6358%" y="863.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="3.4452%" y="853" width="0.0297%" height="15" fill="rgb(245,192,40)" fg:x="116" fg:w="1"/><text x="3.6952%" y="863.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (30 samples, 0.89%)</title><rect x="3.4749%" y="853" width="0.8910%" height="15" fill="rgb(238,167,29)" fg:x="117" fg:w="30"/><text x="3.7249%" y="863.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="4.3659%" y="853" width="0.0297%" height="15" fill="rgb(232,182,51)" fg:x="147" fg:w="1"/><text x="4.6159%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (2 samples, 0.06%)</title><rect x="4.3956%" y="853" width="0.0594%" height="15" fill="rgb(231,60,39)" fg:x="148" fg:w="2"/><text x="4.6456%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.03%)</title><rect x="4.4550%" y="853" width="0.0297%" height="15" fill="rgb(208,69,12)" fg:x="150" fg:w="1"/><text x="4.7050%" y="863.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="4.4847%" y="853" width="0.0297%" height="15" fill="rgb(235,93,37)" fg:x="151" fg:w="1"/><text x="4.7347%" y="863.50"></text></g><g><title>rust::neuron::Network::step::{{closure}} (8 samples, 0.24%)</title><rect x="4.5144%" y="853" width="0.2376%" height="15" fill="rgb(213,116,39)" fg:x="152" fg:w="8"/><text x="4.7644%" y="863.50"></text></g><g><title>[[stack]] (80 samples, 2.38%)</title><rect x="2.4354%" y="869" width="2.3760%" height="15" fill="rgb(222,207,29)" fg:x="82" fg:w="80"/><text x="2.6854%" y="879.50">[[..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (2 samples, 0.06%)</title><rect x="4.7520%" y="853" width="0.0594%" height="15" fill="rgb(206,96,30)" fg:x="160" fg:w="2"/><text x="5.0020%" y="863.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (4 samples, 0.12%)</title><rect x="4.8114%" y="853" width="0.1188%" height="15" fill="rgb(218,138,4)" fg:x="162" fg:w="4"/><text x="5.0614%" y="863.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (56 samples, 1.66%)</title><rect x="4.9302%" y="853" width="1.6632%" height="15" fill="rgb(250,191,14)" fg:x="166" fg:w="56"/><text x="5.1802%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (7 samples, 0.21%)</title><rect x="6.3855%" y="837" width="0.2079%" height="15" fill="rgb(239,60,40)" fg:x="215" fg:w="7"/><text x="6.6355%" y="847.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (9 samples, 0.27%)</title><rect x="6.5934%" y="853" width="0.2673%" height="15" fill="rgb(206,27,48)" fg:x="222" fg:w="9"/><text x="6.8434%" y="863.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (4 samples, 0.12%)</title><rect x="6.7419%" y="837" width="0.1188%" height="15" fill="rgb(225,35,8)" fg:x="227" fg:w="4"/><text x="6.9919%" y="847.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="6.8607%" y="853" width="0.0297%" height="15" fill="rgb(250,213,24)" fg:x="231" fg:w="1"/><text x="7.1107%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (2 samples, 0.06%)</title><rect x="6.8904%" y="853" width="0.0594%" height="15" fill="rgb(247,123,22)" fg:x="232" fg:w="2"/><text x="7.1404%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (6 samples, 0.18%)</title><rect x="6.9498%" y="853" width="0.1782%" height="15" fill="rgb(231,138,38)" fg:x="234" fg:w="6"/><text x="7.1998%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (1 samples, 0.03%)</title><rect x="7.1280%" y="853" width="0.0297%" height="15" fill="rgb(231,145,46)" fg:x="240" fg:w="1"/><text x="7.3780%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (10 samples, 0.30%)</title><rect x="7.1577%" y="853" width="0.2970%" height="15" fill="rgb(251,118,11)" fg:x="241" fg:w="10"/><text x="7.4077%" y="863.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (6 samples, 0.18%)</title><rect x="7.4547%" y="853" width="0.1782%" height="15" fill="rgb(217,147,25)" fg:x="251" fg:w="6"/><text x="7.7047%" y="863.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.03%)</title><rect x="7.6329%" y="853" width="0.0297%" height="15" fill="rgb(247,81,37)" fg:x="257" fg:w="1"/><text x="7.8829%" y="863.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (50 samples, 1.49%)</title><rect x="7.6626%" y="853" width="1.4850%" height="15" fill="rgb(209,12,38)" fg:x="258" fg:w="50"/><text x="7.9126%" y="863.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (1 samples, 0.03%)</title><rect x="9.1476%" y="853" width="0.0297%" height="15" fill="rgb(227,1,9)" fg:x="308" fg:w="1"/><text x="9.3976%" y="863.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (3 samples, 0.09%)</title><rect x="9.1773%" y="853" width="0.0891%" height="15" fill="rgb(248,47,43)" fg:x="309" fg:w="3"/><text x="9.4273%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.03%)</title><rect x="9.2664%" y="853" width="0.0297%" height="15" fill="rgb(221,10,30)" fg:x="312" fg:w="1"/><text x="9.5164%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (1 samples, 0.03%)</title><rect x="9.2961%" y="853" width="0.0297%" height="15" fill="rgb(210,229,1)" fg:x="313" fg:w="1"/><text x="9.5461%" y="863.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (1 samples, 0.03%)</title><rect x="9.3258%" y="853" width="0.0297%" height="15" fill="rgb(222,148,37)" fg:x="314" fg:w="1"/><text x="9.5758%" y="863.50"></text></g><g><title>rust::neuron::Network::step (45 samples, 1.34%)</title><rect x="9.3555%" y="853" width="1.3365%" height="15" fill="rgb(234,67,33)" fg:x="315" fg:w="45"/><text x="9.6055%" y="863.50"></text></g><g><title>rust::neuron::Network::step::{{closure}} (6 samples, 0.18%)</title><rect x="10.6920%" y="853" width="0.1782%" height="15" fill="rgb(247,98,35)" fg:x="360" fg:w="6"/><text x="10.9420%" y="863.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (1 samples, 0.03%)</title><rect x="10.8702%" y="853" width="0.0297%" height="15" fill="rgb(247,138,52)" fg:x="366" fg:w="1"/><text x="11.1202%" y="863.50"></text></g><g><title>[unknown] (206 samples, 6.12%)</title><rect x="4.8114%" y="869" width="6.1182%" height="15" fill="rgb(213,79,30)" fg:x="162" fg:w="206"/><text x="5.0614%" y="879.50">[unknown]</text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (1 samples, 0.03%)</title><rect x="10.8999%" y="853" width="0.0297%" height="15" fill="rgb(246,177,23)" fg:x="367" fg:w="1"/><text x="11.1499%" y="863.50"></text></g><g><title>__GI___exp (1 samples, 0.03%)</title><rect x="10.9296%" y="869" width="0.0297%" height="15" fill="rgb(230,62,27)" fg:x="368" fg:w="1"/><text x="11.1796%" y="879.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (1 samples, 0.03%)</title><rect x="11.0187%" y="565" width="0.0297%" height="15" fill="rgb(216,154,8)" fg:x="371" fg:w="1"/><text x="11.2687%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (2 samples, 0.06%)</title><rect x="11.0187%" y="581" width="0.0594%" height="15" fill="rgb(244,35,45)" fg:x="371" fg:w="2"/><text x="11.2687%" y="591.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.03%)</title><rect x="11.0484%" y="565" width="0.0297%" height="15" fill="rgb(251,115,12)" fg:x="372" fg:w="1"/><text x="11.2984%" y="575.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.03%)</title><rect x="11.0484%" y="549" width="0.0297%" height="15" fill="rgb(240,54,50)" fg:x="372" fg:w="1"/><text x="11.2984%" y="559.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="11.0781%" y="437" width="0.0297%" height="15" fill="rgb(233,84,52)" fg:x="373" fg:w="1"/><text x="11.3281%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.06%)</title><rect x="11.0781%" y="581" width="0.0594%" height="15" fill="rgb(207,117,47)" fg:x="373" fg:w="2"/><text x="11.3281%" y="591.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.06%)</title><rect x="11.0781%" y="565" width="0.0594%" height="15" fill="rgb(249,43,39)" fg:x="373" fg:w="2"/><text x="11.3281%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (2 samples, 0.06%)</title><rect x="11.0781%" y="549" width="0.0594%" height="15" fill="rgb(209,38,44)" fg:x="373" fg:w="2"/><text x="11.3281%" y="559.50"></text></g><g><title>alloc::raw_vec::finish_grow (2 samples, 0.06%)</title><rect x="11.0781%" y="533" width="0.0594%" height="15" fill="rgb(236,212,23)" fg:x="373" fg:w="2"/><text x="11.3281%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (2 samples, 0.06%)</title><rect x="11.0781%" y="517" width="0.0594%" height="15" fill="rgb(242,79,21)" fg:x="373" fg:w="2"/><text x="11.3281%" y="527.50"></text></g><g><title>alloc::alloc::Global::grow_impl (2 samples, 0.06%)</title><rect x="11.0781%" y="501" width="0.0594%" height="15" fill="rgb(211,96,35)" fg:x="373" fg:w="2"/><text x="11.3281%" y="511.50"></text></g><g><title>alloc::alloc::realloc (2 samples, 0.06%)</title><rect x="11.0781%" y="485" width="0.0594%" height="15" fill="rgb(253,215,40)" fg:x="373" fg:w="2"/><text x="11.3281%" y="495.50"></text></g><g><title>__GI___libc_realloc (2 samples, 0.06%)</title><rect x="11.0781%" y="469" width="0.0594%" height="15" fill="rgb(211,81,21)" fg:x="373" fg:w="2"/><text x="11.3281%" y="479.50"></text></g><g><title>_int_realloc (2 samples, 0.06%)</title><rect x="11.0781%" y="453" width="0.0594%" height="15" fill="rgb(208,190,38)" fg:x="373" fg:w="2"/><text x="11.3281%" y="463.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="11.1078%" y="437" width="0.0297%" height="15" fill="rgb(235,213,38)" fg:x="374" fg:w="1"/><text x="11.3578%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;alloc::string::String&gt;&gt; (1 samples, 0.03%)</title><rect x="11.1375%" y="581" width="0.0297%" height="15" fill="rgb(237,122,38)" fg:x="375" fg:w="1"/><text x="11.3875%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="11.1375%" y="565" width="0.0297%" height="15" fill="rgb(244,218,35)" fg:x="375" fg:w="1"/><text x="11.3875%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;[alloc::string::String]&gt; (1 samples, 0.03%)</title><rect x="11.1375%" y="549" width="0.0297%" height="15" fill="rgb(240,68,47)" fg:x="375" fg:w="1"/><text x="11.3875%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.03%)</title><rect x="11.1375%" y="533" width="0.0297%" height="15" fill="rgb(210,16,53)" fg:x="375" fg:w="1"/><text x="11.3875%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="11.1375%" y="517" width="0.0297%" height="15" fill="rgb(235,124,12)" fg:x="375" fg:w="1"/><text x="11.3875%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.03%)</title><rect x="11.1375%" y="501" width="0.0297%" height="15" fill="rgb(224,169,11)" fg:x="375" fg:w="1"/><text x="11.3875%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="11.1375%" y="485" width="0.0297%" height="15" fill="rgb(250,166,2)" fg:x="375" fg:w="1"/><text x="11.3875%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="11.1375%" y="469" width="0.0297%" height="15" fill="rgb(242,216,29)" fg:x="375" fg:w="1"/><text x="11.3875%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.03%)</title><rect x="11.1375%" y="453" width="0.0297%" height="15" fill="rgb(230,116,27)" fg:x="375" fg:w="1"/><text x="11.3875%" y="463.50"></text></g><g><title>__GI___libc_free (1 samples, 0.03%)</title><rect x="11.1375%" y="437" width="0.0297%" height="15" fill="rgb(228,99,48)" fg:x="375" fg:w="1"/><text x="11.3875%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.03%)</title><rect x="11.1969%" y="565" width="0.0297%" height="15" fill="rgb(253,11,6)" fg:x="377" fg:w="1"/><text x="11.4469%" y="575.50"></text></g><g><title>rust::neuron::Network::new (3 samples, 0.09%)</title><rect x="11.1672%" y="581" width="0.0891%" height="15" fill="rgb(247,143,39)" fg:x="376" fg:w="3"/><text x="11.4172%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.03%)</title><rect x="11.2266%" y="565" width="0.0297%" height="15" fill="rgb(236,97,10)" fg:x="378" fg:w="1"/><text x="11.4766%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (1 samples, 0.03%)</title><rect x="11.2266%" y="549" width="0.0297%" height="15" fill="rgb(233,208,19)" fg:x="378" fg:w="1"/><text x="11.4766%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.03%)</title><rect x="11.2266%" y="533" width="0.0297%" height="15" fill="rgb(216,164,2)" fg:x="378" fg:w="1"/><text x="11.4766%" y="543.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.03%)</title><rect x="11.2266%" y="517" width="0.0297%" height="15" fill="rgb(220,129,5)" fg:x="378" fg:w="1"/><text x="11.4766%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.03%)</title><rect x="11.2266%" y="501" width="0.0297%" height="15" fill="rgb(242,17,10)" fg:x="378" fg:w="1"/><text x="11.4766%" y="511.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.03%)</title><rect x="11.2266%" y="485" width="0.0297%" height="15" fill="rgb(242,107,0)" fg:x="378" fg:w="1"/><text x="11.4766%" y="495.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.03%)</title><rect x="11.2266%" y="469" width="0.0297%" height="15" fill="rgb(251,28,31)" fg:x="378" fg:w="1"/><text x="11.4766%" y="479.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.03%)</title><rect x="11.2266%" y="453" width="0.0297%" height="15" fill="rgb(233,223,10)" fg:x="378" fg:w="1"/><text x="11.4766%" y="463.50"></text></g><g><title>_int_realloc (1 samples, 0.03%)</title><rect x="11.2266%" y="437" width="0.0297%" height="15" fill="rgb(215,21,27)" fg:x="378" fg:w="1"/><text x="11.4766%" y="447.50"></text></g><g><title>_int_malloc (1 samples, 0.03%)</title><rect x="11.2266%" y="421" width="0.0297%" height="15" fill="rgb(232,23,21)" fg:x="378" fg:w="1"/><text x="11.4766%" y="431.50"></text></g><g><title>error_entry (1 samples, 0.03%)</title><rect x="11.2266%" y="405" width="0.0297%" height="15" fill="rgb(244,5,23)" fg:x="378" fg:w="1"/><text x="11.4766%" y="415.50"></text></g><g><title>sync_regs (1 samples, 0.03%)</title><rect x="11.2266%" y="389" width="0.0297%" height="15" fill="rgb(226,81,46)" fg:x="378" fg:w="1"/><text x="11.4766%" y="399.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (44 samples, 1.31%)</title><rect x="29.7891%" y="549" width="1.3068%" height="15" fill="rgb(247,70,30)" fg:x="1003" fg:w="44"/><text x="30.0391%" y="559.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (24 samples, 0.71%)</title><rect x="30.3831%" y="533" width="0.7128%" height="15" fill="rgb(212,68,19)" fg:x="1023" fg:w="24"/><text x="30.6331%" y="543.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (3 samples, 0.09%)</title><rect x="31.0959%" y="549" width="0.0891%" height="15" fill="rgb(240,187,13)" fg:x="1047" fg:w="3"/><text x="31.3459%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (7 samples, 0.21%)</title><rect x="31.3335%" y="533" width="0.2079%" height="15" fill="rgb(223,113,26)" fg:x="1055" fg:w="7"/><text x="31.5835%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (6 samples, 0.18%)</title><rect x="31.3632%" y="517" width="0.1782%" height="15" fill="rgb(206,192,2)" fg:x="1056" fg:w="6"/><text x="31.6132%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (25 samples, 0.74%)</title><rect x="31.1850%" y="549" width="0.7425%" height="15" fill="rgb(241,108,4)" fg:x="1050" fg:w="25"/><text x="31.4350%" y="559.50"></text></g><g><title>core::slice::raw::from_raw_parts (13 samples, 0.39%)</title><rect x="31.5414%" y="533" width="0.3861%" height="15" fill="rgb(247,173,49)" fg:x="1062" fg:w="13"/><text x="31.7914%" y="543.50"></text></g><g><title>core::ptr::slice_from_raw_parts (13 samples, 0.39%)</title><rect x="31.5414%" y="517" width="0.3861%" height="15" fill="rgb(224,114,35)" fg:x="1062" fg:w="13"/><text x="31.7914%" y="527.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (13 samples, 0.39%)</title><rect x="31.5414%" y="501" width="0.3861%" height="15" fill="rgb(245,159,27)" fg:x="1062" fg:w="13"/><text x="31.7914%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (81 samples, 2.41%)</title><rect x="37.0656%" y="517" width="2.4057%" height="15" fill="rgb(245,172,44)" fg:x="1248" fg:w="81"/><text x="37.3156%" y="527.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (58 samples, 1.72%)</title><rect x="37.7487%" y="501" width="1.7226%" height="15" fill="rgb(236,23,11)" fg:x="1271" fg:w="58"/><text x="37.9987%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (17 samples, 0.50%)</title><rect x="39.4713%" y="485" width="0.5049%" height="15" fill="rgb(205,117,38)" fg:x="1329" fg:w="17"/><text x="39.7213%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (393 samples, 11.67%)</title><rect x="35.5509%" y="533" width="11.6721%" height="15" fill="rgb(237,72,25)" fg:x="1197" fg:w="393"/><text x="35.8009%" y="543.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::slice::raw::from_raw_parts (261 samples, 7.75%)</title><rect x="39.4713%" y="517" width="7.7517%" height="15" fill="rgb(244,70,9)" fg:x="1329" fg:w="261"/><text x="39.7213%" y="527.50">core::slice..</text></g><g><title>core::ptr::slice_from_raw_parts (261 samples, 7.75%)</title><rect x="39.4713%" y="501" width="7.7517%" height="15" fill="rgb(217,125,39)" fg:x="1329" fg:w="261"/><text x="39.7213%" y="511.50">core::ptr::..</text></g><g><title>core::ptr::metadata::from_raw_parts (244 samples, 7.25%)</title><rect x="39.9762%" y="485" width="7.2468%" height="15" fill="rgb(235,36,10)" fg:x="1346" fg:w="244"/><text x="40.2262%" y="495.50">core::ptr:..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (727 samples, 21.59%)</title><rect x="31.9275%" y="549" width="21.5919%" height="15" fill="rgb(251,123,47)" fg:x="1075" fg:w="727"/><text x="32.1775%" y="559.50">&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (212 samples, 6.30%)</title><rect x="47.2230%" y="533" width="6.2964%" height="15" fill="rgb(221,13,13)" fg:x="1590" fg:w="212"/><text x="47.4730%" y="543.50">core::sl..</text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (170 samples, 5.05%)</title><rect x="48.4704%" y="517" width="5.0490%" height="15" fill="rgb(238,131,9)" fg:x="1632" fg:w="170"/><text x="48.7204%" y="527.50">&lt;usize..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_mut_ptr (8 samples, 0.24%)</title><rect x="53.9353%" y="517" width="0.2376%" height="15" fill="rgb(211,50,8)" fg:x="1816" fg:w="8"/><text x="54.1853%" y="527.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (8 samples, 0.24%)</title><rect x="53.9353%" y="501" width="0.2376%" height="15" fill="rgb(245,182,24)" fg:x="1816" fg:w="8"/><text x="54.1853%" y="511.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::DerefMut&gt;::deref_mut (18 samples, 0.53%)</title><rect x="53.9056%" y="533" width="0.5346%" height="15" fill="rgb(242,14,37)" fg:x="1815" fg:w="18"/><text x="54.1556%" y="543.50"></text></g><g><title>core::slice::raw::from_raw_parts_mut (9 samples, 0.27%)</title><rect x="54.1729%" y="517" width="0.2673%" height="15" fill="rgb(246,228,12)" fg:x="1824" fg:w="9"/><text x="54.4229%" y="527.50"></text></g><g><title>core::ptr::slice_from_raw_parts_mut (9 samples, 0.27%)</title><rect x="54.1729%" y="501" width="0.2673%" height="15" fill="rgb(213,55,15)" fg:x="1824" fg:w="9"/><text x="54.4229%" y="511.50"></text></g><g><title>core::ptr::metadata::from_raw_parts_mut (9 samples, 0.27%)</title><rect x="54.1729%" y="485" width="0.2673%" height="15" fill="rgb(209,9,3)" fg:x="1824" fg:w="9"/><text x="54.4229%" y="495.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::IndexMut&lt;I&gt;&gt;::index_mut (41 samples, 1.22%)</title><rect x="53.5195%" y="549" width="1.2177%" height="15" fill="rgb(230,59,30)" fg:x="1802" fg:w="41"/><text x="53.7695%" y="559.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::IndexMut&lt;I&gt; for [T]&gt;::index_mut (10 samples, 0.30%)</title><rect x="54.4402%" y="533" width="0.2970%" height="15" fill="rgb(209,121,21)" fg:x="1833" fg:w="10"/><text x="54.6902%" y="543.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index_mut (8 samples, 0.24%)</title><rect x="54.4996%" y="517" width="0.2376%" height="15" fill="rgb(220,109,13)" fg:x="1835" fg:w="8"/><text x="54.7496%" y="527.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::FromResidual&gt;::from_residual (9 samples, 0.27%)</title><rect x="59.2813%" y="533" width="0.2673%" height="15" fill="rgb(232,18,1)" fg:x="1996" fg:w="9"/><text x="59.5313%" y="543.50"></text></g><g><title>&lt;core::option::Option&lt;T&gt; as core::ops::try_trait::Try&gt;::branch (33 samples, 0.98%)</title><rect x="59.5486%" y="533" width="0.9801%" height="15" fill="rgb(215,41,42)" fg:x="2005" fg:w="33"/><text x="59.7986%" y="543.50"></text></g><g><title>&lt;core::ptr::non_null::NonNull&lt;T&gt; as core::cmp::PartialEq&gt;::eq (28 samples, 0.83%)</title><rect x="62.5780%" y="517" width="0.8316%" height="15" fill="rgb(224,123,36)" fg:x="2107" fg:w="28"/><text x="62.8280%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ref (2 samples, 0.06%)</title><rect x="63.4096%" y="517" width="0.0594%" height="15" fill="rgb(240,125,3)" fg:x="2135" fg:w="2"/><text x="63.6596%" y="527.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (349 samples, 10.37%)</title><rect x="54.7372%" y="549" width="10.3653%" height="15" fill="rgb(205,98,50)" fg:x="1843" fg:w="349"/><text x="54.9872%" y="559.50">&lt;core::iter::ad..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (154 samples, 4.57%)</title><rect x="60.5287%" y="533" width="4.5738%" height="15" fill="rgb(205,185,37)" fg:x="2038" fg:w="154"/><text x="60.7787%" y="543.50">&lt;core..</text></g><g><title>core::slice::iter::Iter&lt;T&gt;::post_inc_start (55 samples, 1.63%)</title><rect x="63.4690%" y="517" width="1.6335%" height="15" fill="rgb(238,207,15)" fg:x="2137" fg:w="55"/><text x="63.7190%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::add (25 samples, 0.74%)</title><rect x="64.3600%" y="501" width="0.7425%" height="15" fill="rgb(213,199,42)" fg:x="2167" fg:w="25"/><text x="64.6100%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (13 samples, 0.39%)</title><rect x="64.7164%" y="485" width="0.3861%" height="15" fill="rgb(235,201,11)" fg:x="2179" fg:w="13"/><text x="64.9664%" y="495.50"></text></g><g><title>asm_common_interrupt (1 samples, 0.03%)</title><rect x="65.1025%" y="549" width="0.0297%" height="15" fill="rgb(207,46,11)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="559.50"></text></g><g><title>common_interrupt (1 samples, 0.03%)</title><rect x="65.1025%" y="533" width="0.0297%" height="15" fill="rgb(241,35,35)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="543.50"></text></g><g><title>__irq_exit_rcu (1 samples, 0.03%)</title><rect x="65.1025%" y="517" width="0.0297%" height="15" fill="rgb(243,32,47)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="527.50"></text></g><g><title>__softirqentry_text_start (1 samples, 0.03%)</title><rect x="65.1025%" y="501" width="0.0297%" height="15" fill="rgb(247,202,23)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="511.50"></text></g><g><title>net_rx_action (1 samples, 0.03%)</title><rect x="65.1025%" y="485" width="0.0297%" height="15" fill="rgb(219,102,11)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="495.50"></text></g><g><title>__napi_poll (1 samples, 0.03%)</title><rect x="65.1025%" y="469" width="0.0297%" height="15" fill="rgb(243,110,44)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="479.50"></text></g><g><title>rtl8169_poll (1 samples, 0.03%)</title><rect x="65.1025%" y="453" width="0.0297%" height="15" fill="rgb(222,74,54)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="463.50"></text></g><g><title>napi_gro_receive (1 samples, 0.03%)</title><rect x="65.1025%" y="437" width="0.0297%" height="15" fill="rgb(216,99,12)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="447.50"></text></g><g><title>dev_gro_receive (1 samples, 0.03%)</title><rect x="65.1025%" y="421" width="0.0297%" height="15" fill="rgb(226,22,26)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="431.50"></text></g><g><title>inet_gro_receive (1 samples, 0.03%)</title><rect x="65.1025%" y="405" width="0.0297%" height="15" fill="rgb(217,163,10)" fg:x="2192" fg:w="1"/><text x="65.3525%" y="415.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.33%)</title><rect x="66.1717%" y="389" width="0.3267%" height="15" fill="rgb(213,25,53)" fg:x="2228" fg:w="11"/><text x="66.4217%" y="399.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (9 samples, 0.27%)</title><rect x="66.2311%" y="373" width="0.2673%" height="15" fill="rgb(252,105,26)" fg:x="2230" fg:w="9"/><text x="66.4811%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (4 samples, 0.12%)</title><rect x="66.3796%" y="357" width="0.1188%" height="15" fill="rgb(220,39,43)" fg:x="2235" fg:w="4"/><text x="66.6296%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (4 samples, 0.12%)</title><rect x="66.3796%" y="341" width="0.1188%" height="15" fill="rgb(229,68,48)" fg:x="2235" fg:w="4"/><text x="66.6296%" y="351.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::current_len (1 samples, 0.03%)</title><rect x="67.3597%" y="325" width="0.0297%" height="15" fill="rgb(252,8,32)" fg:x="2268" fg:w="1"/><text x="67.6097%" y="335.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (7 samples, 0.21%)</title><rect x="67.3003%" y="357" width="0.2079%" height="15" fill="rgb(223,20,43)" fg:x="2266" fg:w="7"/><text x="67.5503%" y="367.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (5 samples, 0.15%)</title><rect x="67.3597%" y="341" width="0.1485%" height="15" fill="rgb(229,81,49)" fg:x="2268" fg:w="5"/><text x="67.6097%" y="351.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (4 samples, 0.12%)</title><rect x="67.3894%" y="325" width="0.1188%" height="15" fill="rgb(236,28,36)" fg:x="2269" fg:w="4"/><text x="67.6394%" y="335.50"></text></g><g><title>@plt (1 samples, 0.03%)</title><rect x="68.4883%" y="293" width="0.0297%" height="15" fill="rgb(249,185,26)" fg:x="2306" fg:w="1"/><text x="68.7383%" y="303.50"></text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (74 samples, 2.20%)</title><rect x="67.1221%" y="373" width="2.1978%" height="15" fill="rgb(249,174,33)" fg:x="2260" fg:w="74"/><text x="67.3721%" y="383.50">c..</text></g><g><title>rust::neuron::Network::step::{{closure}} (61 samples, 1.81%)</title><rect x="67.5082%" y="357" width="1.8117%" height="15" fill="rgb(233,201,37)" fg:x="2273" fg:w="61"/><text x="67.7582%" y="367.50">r..</text></g><g><title>rust::neuron::Network::direct_s (51 samples, 1.51%)</title><rect x="67.8052%" y="341" width="1.5147%" height="15" fill="rgb(221,78,26)" fg:x="2283" fg:w="51"/><text x="68.0552%" y="351.50"></text></g><g><title>std::f64::&lt;impl f64&gt;::exp (30 samples, 0.89%)</title><rect x="68.4289%" y="325" width="0.8910%" height="15" fill="rgb(250,127,30)" fg:x="2304" fg:w="30"/><text x="68.6789%" y="335.50"></text></g><g><title>__GI___exp (30 samples, 0.89%)</title><rect x="68.4289%" y="309" width="0.8910%" height="15" fill="rgb(230,49,44)" fg:x="2304" fg:w="30"/><text x="68.6789%" y="319.50"></text></g><g><title>__ieee754_exp_fma (27 samples, 0.80%)</title><rect x="68.5180%" y="293" width="0.8019%" height="15" fill="rgb(229,67,23)" fg:x="2307" fg:w="27"/><text x="68.7680%" y="303.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (144 samples, 4.28%)</title><rect x="65.1322%" y="421" width="4.2768%" height="15" fill="rgb(249,83,47)" fg:x="2193" fg:w="144"/><text x="65.3822%" y="431.50">&lt;core..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (144 samples, 4.28%)</title><rect x="65.1322%" y="405" width="4.2768%" height="15" fill="rgb(215,43,3)" fg:x="2193" fg:w="144"/><text x="65.3822%" y="415.50">core:..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (98 samples, 2.91%)</title><rect x="66.4984%" y="389" width="2.9106%" height="15" fill="rgb(238,154,13)" fg:x="2239" fg:w="98"/><text x="66.7484%" y="399.50">co..</text></g><g><title>rust::neuron::Network::step::{{closure}} (3 samples, 0.09%)</title><rect x="69.3199%" y="373" width="0.0891%" height="15" fill="rgb(219,56,2)" fg:x="2334" fg:w="3"/><text x="69.5699%" y="383.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (17 samples, 0.50%)</title><rect x="71.5771%" y="117" width="0.5049%" height="15" fill="rgb(233,0,4)" fg:x="2410" fg:w="17"/><text x="71.8271%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (17 samples, 0.50%)</title><rect x="71.5771%" y="101" width="0.5049%" height="15" fill="rgb(235,30,7)" fg:x="2410" fg:w="17"/><text x="71.8271%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (7 samples, 0.21%)</title><rect x="71.8741%" y="85" width="0.2079%" height="15" fill="rgb(250,79,13)" fg:x="2420" fg:w="7"/><text x="72.1241%" y="95.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="72.0226%" y="69" width="0.0594%" height="15" fill="rgb(211,146,34)" fg:x="2425" fg:w="2"/><text x="72.2726%" y="79.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (32 samples, 0.95%)</title><rect x="71.2207%" y="181" width="0.9504%" height="15" fill="rgb(228,22,38)" fg:x="2398" fg:w="32"/><text x="71.4707%" y="191.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (32 samples, 0.95%)</title><rect x="71.2207%" y="165" width="0.9504%" height="15" fill="rgb(235,168,5)" fg:x="2398" fg:w="32"/><text x="71.4707%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (30 samples, 0.89%)</title><rect x="71.2801%" y="149" width="0.8910%" height="15" fill="rgb(221,155,16)" fg:x="2400" fg:w="30"/><text x="71.5301%" y="159.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (27 samples, 0.80%)</title><rect x="71.3692%" y="133" width="0.8019%" height="15" fill="rgb(215,215,53)" fg:x="2403" fg:w="27"/><text x="71.6192%" y="143.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (3 samples, 0.09%)</title><rect x="72.0820%" y="117" width="0.0891%" height="15" fill="rgb(223,4,10)" fg:x="2427" fg:w="3"/><text x="72.3320%" y="127.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (2 samples, 0.06%)</title><rect x="72.1117%" y="101" width="0.0594%" height="15" fill="rgb(234,103,6)" fg:x="2428" fg:w="2"/><text x="72.3617%" y="111.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (51 samples, 1.51%)</title><rect x="70.9237%" y="229" width="1.5147%" height="15" fill="rgb(227,97,0)" fg:x="2388" fg:w="51"/><text x="71.1737%" y="239.50"></text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (49 samples, 1.46%)</title><rect x="70.9831%" y="213" width="1.4553%" height="15" fill="rgb(234,150,53)" fg:x="2390" fg:w="49"/><text x="71.2331%" y="223.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (48 samples, 1.43%)</title><rect x="71.0128%" y="197" width="1.4256%" height="15" fill="rgb(228,201,54)" fg:x="2391" fg:w="48"/><text x="71.2628%" y="207.50"></text></g><g><title>rust::neuron::Network::step::{{closure}} (9 samples, 0.27%)</title><rect x="72.1711%" y="181" width="0.2673%" height="15" fill="rgb(222,22,37)" fg:x="2430" fg:w="9"/><text x="72.4211%" y="191.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&lt;&amp;f64&gt;&gt;::mul (5 samples, 0.15%)</title><rect x="72.6463%" y="213" width="0.1485%" height="15" fill="rgb(237,53,32)" fg:x="2446" fg:w="5"/><text x="72.8963%" y="223.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (2 samples, 0.06%)</title><rect x="72.7354%" y="197" width="0.0594%" height="15" fill="rgb(233,25,53)" fg:x="2449" fg:w="2"/><text x="72.9854%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (74 samples, 2.20%)</title><rect x="70.7455%" y="245" width="2.1978%" height="15" fill="rgb(210,40,34)" fg:x="2382" fg:w="74"/><text x="70.9955%" y="255.50">&lt;..</text></g><g><title>rust::neuron::Network::step::{{closure}} (17 samples, 0.50%)</title><rect x="72.4384%" y="229" width="0.5049%" height="15" fill="rgb(241,220,44)" fg:x="2439" fg:w="17"/><text x="72.6884%" y="239.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&lt;&amp;f64&gt;&gt;::sub (5 samples, 0.15%)</title><rect x="72.7948%" y="213" width="0.1485%" height="15" fill="rgb(235,28,35)" fg:x="2451" fg:w="5"/><text x="73.0448%" y="223.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (4 samples, 0.12%)</title><rect x="72.8245%" y="197" width="0.1188%" height="15" fill="rgb(210,56,17)" fg:x="2452" fg:w="4"/><text x="73.0745%" y="207.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (28 samples, 0.83%)</title><rect x="74.6956%" y="85" width="0.8316%" height="15" fill="rgb(224,130,29)" fg:x="2515" fg:w="28"/><text x="74.9456%" y="95.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (28 samples, 0.83%)</title><rect x="74.6956%" y="69" width="0.8316%" height="15" fill="rgb(235,212,8)" fg:x="2515" fg:w="28"/><text x="74.9456%" y="79.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (11 samples, 0.33%)</title><rect x="75.2005%" y="53" width="0.3267%" height="15" fill="rgb(223,33,50)" fg:x="2532" fg:w="11"/><text x="75.4505%" y="63.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (2 samples, 0.06%)</title><rect x="75.4678%" y="37" width="0.0594%" height="15" fill="rgb(219,149,13)" fg:x="2541" fg:w="2"/><text x="75.7178%" y="47.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (63 samples, 1.87%)</title><rect x="73.7452%" y="149" width="1.8711%" height="15" fill="rgb(250,156,29)" fg:x="2483" fg:w="63"/><text x="73.9952%" y="159.50">c..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (61 samples, 1.81%)</title><rect x="73.8046%" y="133" width="1.8117%" height="15" fill="rgb(216,193,19)" fg:x="2485" fg:w="61"/><text x="74.0546%" y="143.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (55 samples, 1.63%)</title><rect x="73.9828%" y="117" width="1.6335%" height="15" fill="rgb(216,135,14)" fg:x="2491" fg:w="55"/><text x="74.2328%" y="127.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (49 samples, 1.46%)</title><rect x="74.1610%" y="101" width="1.4553%" height="15" fill="rgb(241,47,5)" fg:x="2497" fg:w="49"/><text x="74.4110%" y="111.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (3 samples, 0.09%)</title><rect x="75.5272%" y="85" width="0.0891%" height="15" fill="rgb(233,42,35)" fg:x="2543" fg:w="3"/><text x="75.7772%" y="95.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="75.5866%" y="69" width="0.0297%" height="15" fill="rgb(231,13,6)" fg:x="2545" fg:w="1"/><text x="75.8366%" y="79.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (78 samples, 2.32%)</title><rect x="73.4482%" y="197" width="2.3166%" height="15" fill="rgb(207,181,40)" fg:x="2473" fg:w="78"/><text x="73.6982%" y="207.50">c..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (78 samples, 2.32%)</title><rect x="73.4482%" y="181" width="2.3166%" height="15" fill="rgb(254,173,49)" fg:x="2473" fg:w="78"/><text x="73.6982%" y="191.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (75 samples, 2.23%)</title><rect x="73.5373%" y="165" width="2.2275%" height="15" fill="rgb(221,1,38)" fg:x="2476" fg:w="75"/><text x="73.7873%" y="175.50">&lt;..</text></g><g><title>rust::neuron::Network::step::{{closure}} (5 samples, 0.15%)</title><rect x="75.6163%" y="149" width="0.1485%" height="15" fill="rgb(206,124,46)" fg:x="2546" fg:w="5"/><text x="75.8663%" y="159.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&lt;&amp;f64&gt;&gt;::mul (3 samples, 0.09%)</title><rect x="75.9430%" y="181" width="0.0891%" height="15" fill="rgb(249,21,11)" fg:x="2557" fg:w="3"/><text x="76.1930%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (1 samples, 0.03%)</title><rect x="76.0024%" y="165" width="0.0297%" height="15" fill="rgb(222,201,40)" fg:x="2559" fg:w="1"/><text x="76.2524%" y="175.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (6 samples, 0.18%)</title><rect x="76.0321%" y="181" width="0.1782%" height="15" fill="rgb(235,61,29)" fg:x="2560" fg:w="6"/><text x="76.2821%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (3 samples, 0.09%)</title><rect x="76.1212%" y="165" width="0.0891%" height="15" fill="rgb(219,207,3)" fg:x="2563" fg:w="3"/><text x="76.3712%" y="175.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Sub&lt;&amp;f64&gt;&gt;::sub (11 samples, 0.33%)</title><rect x="76.2103%" y="181" width="0.3267%" height="15" fill="rgb(222,56,46)" fg:x="2566" fg:w="11"/><text x="76.4603%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (2 samples, 0.06%)</title><rect x="76.4776%" y="165" width="0.0594%" height="15" fill="rgb(239,76,54)" fg:x="2575" fg:w="2"/><text x="76.7276%" y="175.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (127 samples, 3.77%)</title><rect x="72.9433%" y="245" width="3.7719%" height="15" fill="rgb(231,124,27)" fg:x="2456" fg:w="127"/><text x="73.1933%" y="255.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (127 samples, 3.77%)</title><rect x="72.9433%" y="229" width="3.7719%" height="15" fill="rgb(249,195,6)" fg:x="2456" fg:w="127"/><text x="73.1933%" y="239.50">&lt;cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (120 samples, 3.56%)</title><rect x="73.1512%" y="213" width="3.5640%" height="15" fill="rgb(237,174,47)" fg:x="2463" fg:w="120"/><text x="73.4012%" y="223.50">&lt;cor..</text></g><g><title>rust::neuron::Network::step::{{closure}} (32 samples, 0.95%)</title><rect x="75.7648%" y="197" width="0.9504%" height="15" fill="rgb(206,201,31)" fg:x="2551" fg:w="32"/><text x="76.0148%" y="207.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&lt;&amp;f64&gt;&gt;::sub (6 samples, 0.18%)</title><rect x="76.5370%" y="181" width="0.1782%" height="15" fill="rgb(231,57,52)" fg:x="2577" fg:w="6"/><text x="76.7870%" y="191.50"></text></g><g><title>&lt;f64 as core::ops::arith::Sub&gt;::sub (1 samples, 0.03%)</title><rect x="76.6855%" y="165" width="0.0297%" height="15" fill="rgb(248,177,22)" fg:x="2582" fg:w="1"/><text x="76.9355%" y="175.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (214 samples, 6.36%)</title><rect x="70.3891%" y="309" width="6.3558%" height="15" fill="rgb(215,211,37)" fg:x="2370" fg:w="214"/><text x="70.6391%" y="319.50">core::it..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (213 samples, 6.33%)</title><rect x="70.4188%" y="293" width="6.3261%" height="15" fill="rgb(241,128,51)" fg:x="2371" fg:w="213"/><text x="70.6688%" y="303.50">&lt;I as co..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (212 samples, 6.30%)</title><rect x="70.4485%" y="277" width="6.2964%" height="15" fill="rgb(227,165,31)" fg:x="2372" fg:w="212"/><text x="70.6985%" y="287.50">&lt;core::i..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::get_unchecked (210 samples, 6.24%)</title><rect x="70.5079%" y="261" width="6.2370%" height="15" fill="rgb(228,167,24)" fg:x="2374" fg:w="210"/><text x="70.7579%" y="271.50">&lt;core::i..</text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="76.7152%" y="245" width="0.0297%" height="15" fill="rgb(228,143,12)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="255.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="76.7152%" y="229" width="0.0297%" height="15" fill="rgb(249,149,8)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="239.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="76.7152%" y="213" width="0.0297%" height="15" fill="rgb(243,35,44)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="223.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.03%)</title><rect x="76.7152%" y="197" width="0.0297%" height="15" fill="rgb(246,89,9)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="207.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.03%)</title><rect x="76.7152%" y="181" width="0.0297%" height="15" fill="rgb(233,213,13)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="191.50"></text></g><g><title>tick_sched_timer (1 samples, 0.03%)</title><rect x="76.7152%" y="165" width="0.0297%" height="15" fill="rgb(233,141,41)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="175.50"></text></g><g><title>tick_sched_handle (1 samples, 0.03%)</title><rect x="76.7152%" y="149" width="0.0297%" height="15" fill="rgb(239,167,4)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="159.50"></text></g><g><title>update_process_times (1 samples, 0.03%)</title><rect x="76.7152%" y="133" width="0.0297%" height="15" fill="rgb(209,217,16)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="143.50"></text></g><g><title>scheduler_tick (1 samples, 0.03%)</title><rect x="76.7152%" y="117" width="0.0297%" height="15" fill="rgb(219,88,35)" fg:x="2583" fg:w="1"/><text x="76.9652%" y="127.50"></text></g><g><title>core::iter::adapters::zip::try_get_unchecked (227 samples, 6.74%)</title><rect x="70.1515%" y="357" width="6.7419%" height="15" fill="rgb(220,193,23)" fg:x="2362" fg:w="227"/><text x="70.4015%" y="367.50">core::ite..</text></g><g><title>&lt;I as core::iter::adapters::zip::SpecTrustedRandomAccess&gt;::try_get_unchecked (227 samples, 6.74%)</title><rect x="70.1515%" y="341" width="6.7419%" height="15" fill="rgb(230,90,52)" fg:x="2362" fg:w="227"/><text x="70.4015%" y="351.50">&lt;I as cor..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (226 samples, 6.71%)</title><rect x="70.1812%" y="325" width="6.7122%" height="15" fill="rgb(252,106,19)" fg:x="2363" fg:w="226"/><text x="70.4312%" y="335.50">&lt;core::it..</text></g><g><title>rust::neuron::Network::step::{{closure}} (5 samples, 0.15%)</title><rect x="76.7449%" y="309" width="0.1485%" height="15" fill="rgb(206,74,20)" fg:x="2584" fg:w="5"/><text x="76.9949%" y="319.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (235 samples, 6.98%)</title><rect x="70.1218%" y="373" width="6.9795%" height="15" fill="rgb(230,138,44)" fg:x="2361" fg:w="235"/><text x="70.3718%" y="383.50">&lt;core::it..</text></g><g><title>rust::neuron::Network::step::{{closure}} (7 samples, 0.21%)</title><rect x="76.8934%" y="357" width="0.2079%" height="15" fill="rgb(235,182,43)" fg:x="2589" fg:w="7"/><text x="77.1434%" y="367.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (249 samples, 7.40%)</title><rect x="69.7357%" y="405" width="7.3953%" height="15" fill="rgb(242,16,51)" fg:x="2348" fg:w="249"/><text x="69.9857%" y="415.50">&lt;core::ite..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (249 samples, 7.40%)</title><rect x="69.7357%" y="389" width="7.3953%" height="15" fill="rgb(248,9,4)" fg:x="2348" fg:w="249"/><text x="69.9857%" y="399.50">&lt;core::ite..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (1 samples, 0.03%)</title><rect x="77.1013%" y="373" width="0.0297%" height="15" fill="rgb(210,31,22)" fg:x="2596" fg:w="1"/><text x="77.3513%" y="383.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::current_len (2 samples, 0.06%)</title><rect x="77.7250%" y="357" width="0.0594%" height="15" fill="rgb(239,54,39)" fg:x="2617" fg:w="2"/><text x="77.9750%" y="367.50"></text></g><g><title>alloc::vec::set_len_on_drop::SetLenOnDrop::increment_len (4 samples, 0.12%)</title><rect x="77.7844%" y="357" width="0.1188%" height="15" fill="rgb(230,99,41)" fg:x="2619" fg:w="4"/><text x="78.0344%" y="367.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (9 samples, 0.27%)</title><rect x="77.6656%" y="389" width="0.2673%" height="15" fill="rgb(253,106,12)" fg:x="2615" fg:w="9"/><text x="77.9156%" y="399.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted::{{closure}} (7 samples, 0.21%)</title><rect x="77.7250%" y="373" width="0.2079%" height="15" fill="rgb(213,46,41)" fg:x="2617" fg:w="7"/><text x="77.9750%" y="383.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (1 samples, 0.03%)</title><rect x="77.9032%" y="357" width="0.0297%" height="15" fill="rgb(215,133,35)" fg:x="2623" fg:w="1"/><text x="78.1532%" y="367.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (437 samples, 12.98%)</title><rect x="65.1322%" y="485" width="12.9789%" height="15" fill="rgb(213,28,5)" fg:x="2193" fg:w="437"/><text x="65.3822%" y="495.50">&lt;alloc::vec::Vec&lt;T,..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_trusted (437 samples, 12.98%)</title><rect x="65.1322%" y="469" width="12.9789%" height="15" fill="rgb(215,77,49)" fg:x="2193" fg:w="437"/><text x="65.3822%" y="479.50">alloc::vec::Vec&lt;T,A..</text></g><g><title>core::iter::traits::iterator::Iterator::for_each (437 samples, 12.98%)</title><rect x="65.1322%" y="453" width="12.9789%" height="15" fill="rgb(248,100,22)" fg:x="2193" fg:w="437"/><text x="65.3822%" y="463.50">core::iter::traits:..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (437 samples, 12.98%)</title><rect x="65.1322%" y="437" width="12.9789%" height="15" fill="rgb(208,67,9)" fg:x="2193" fg:w="437"/><text x="65.3822%" y="447.50">&lt;core::iter::adapte..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (293 samples, 8.70%)</title><rect x="69.4090%" y="421" width="8.7021%" height="15" fill="rgb(219,133,21)" fg:x="2337" fg:w="293"/><text x="69.6590%" y="431.50">core::iter::..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (33 samples, 0.98%)</title><rect x="77.1310%" y="405" width="0.9801%" height="15" fill="rgb(246,46,29)" fg:x="2597" fg:w="33"/><text x="77.3810%" y="415.50"></text></g><g><title>rust::neuron::Network::step::{{closure}} (6 samples, 0.18%)</title><rect x="77.9329%" y="389" width="0.1782%" height="15" fill="rgb(246,185,52)" fg:x="2624" fg:w="6"/><text x="78.1829%" y="399.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Add&lt;f64&gt;&gt;::add (5 samples, 0.15%)</title><rect x="77.9626%" y="373" width="0.1485%" height="15" fill="rgb(252,136,11)" fg:x="2625" fg:w="5"/><text x="78.2126%" y="383.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (3 samples, 0.09%)</title><rect x="78.1111%" y="421" width="0.0891%" height="15" fill="rgb(219,138,53)" fg:x="2630" fg:w="3"/><text x="78.3611%" y="431.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (3 samples, 0.09%)</title><rect x="78.1111%" y="405" width="0.0891%" height="15" fill="rgb(211,51,23)" fg:x="2630" fg:w="3"/><text x="78.3611%" y="415.50"></text></g><g><title>alloc::alloc::alloc (3 samples, 0.09%)</title><rect x="78.1111%" y="389" width="0.0891%" height="15" fill="rgb(247,221,28)" fg:x="2630" fg:w="3"/><text x="78.3611%" y="399.50"></text></g><g><title>__GI___libc_malloc (3 samples, 0.09%)</title><rect x="78.1111%" y="373" width="0.0891%" height="15" fill="rgb(251,222,45)" fg:x="2630" fg:w="3"/><text x="78.3611%" y="383.50"></text></g><g><title>_int_malloc (3 samples, 0.09%)</title><rect x="78.1111%" y="357" width="0.0891%" height="15" fill="rgb(217,162,53)" fg:x="2630" fg:w="3"/><text x="78.3611%" y="367.50"></text></g><g><title>checked_request2size (1 samples, 0.03%)</title><rect x="78.1705%" y="341" width="0.0297%" height="15" fill="rgb(229,93,14)" fg:x="2632" fg:w="1"/><text x="78.4205%" y="351.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (441 samples, 13.10%)</title><rect x="65.1322%" y="549" width="13.0977%" height="15" fill="rgb(209,67,49)" fg:x="2193" fg:w="441"/><text x="65.3822%" y="559.50">core::iter::traits::..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (441 samples, 13.10%)</title><rect x="65.1322%" y="533" width="13.0977%" height="15" fill="rgb(213,87,29)" fg:x="2193" fg:w="441"/><text x="65.3822%" y="543.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (441 samples, 13.10%)</title><rect x="65.1322%" y="517" width="13.0977%" height="15" fill="rgb(205,151,52)" fg:x="2193" fg:w="441"/><text x="65.3822%" y="527.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (441 samples, 13.10%)</title><rect x="65.1322%" y="501" width="13.0977%" height="15" fill="rgb(253,215,39)" fg:x="2193" fg:w="441"/><text x="65.3822%" y="511.50">&lt;alloc::vec::Vec&lt;T&gt; ..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.12%)</title><rect x="78.1111%" y="485" width="0.1188%" height="15" fill="rgb(221,220,41)" fg:x="2630" fg:w="4"/><text x="78.3611%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="78.1111%" y="469" width="0.1188%" height="15" fill="rgb(218,133,21)" fg:x="2630" fg:w="4"/><text x="78.3611%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.12%)</title><rect x="78.1111%" y="453" width="0.1188%" height="15" fill="rgb(221,193,43)" fg:x="2630" fg:w="4"/><text x="78.3611%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.12%)</title><rect x="78.1111%" y="437" width="0.1188%" height="15" fill="rgb(240,128,52)" fg:x="2630" fg:w="4"/><text x="78.3611%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.03%)</title><rect x="78.2002%" y="421" width="0.0297%" height="15" fill="rgb(253,114,12)" fg:x="2633" fg:w="1"/><text x="78.4502%" y="431.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.03%)</title><rect x="78.2002%" y="405" width="0.0297%" height="15" fill="rgb(215,223,47)" fg:x="2633" fg:w="1"/><text x="78.4502%" y="415.50"></text></g><g><title>core::iter::traits::iterator::Iterator::enumerate (4 samples, 0.12%)</title><rect x="78.2299%" y="549" width="0.1188%" height="15" fill="rgb(248,225,23)" fg:x="2634" fg:w="4"/><text x="78.4799%" y="559.50"></text></g><g><title>core::iter::adapters::enumerate::Enumerate&lt;I&gt;::new (3 samples, 0.09%)</title><rect x="78.2596%" y="533" width="0.0891%" height="15" fill="rgb(250,108,0)" fg:x="2635" fg:w="3"/><text x="78.5096%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::map (10 samples, 0.30%)</title><rect x="78.3487%" y="549" width="0.2970%" height="15" fill="rgb(228,208,7)" fg:x="2638" fg:w="10"/><text x="78.5987%" y="559.50"></text></g><g><title>core::iter::adapters::map::Map&lt;I,F&gt;::new (9 samples, 0.27%)</title><rect x="78.3784%" y="533" width="0.2673%" height="15" fill="rgb(244,45,10)" fg:x="2639" fg:w="9"/><text x="78.6284%" y="543.50"></text></g><g><title>__memcpy_avx_unaligned_erms (8 samples, 0.24%)</title><rect x="78.4081%" y="517" width="0.2376%" height="15" fill="rgb(207,125,25)" fg:x="2640" fg:w="8"/><text x="78.6581%" y="527.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::add (9 samples, 0.27%)</title><rect x="83.9323%" y="437" width="0.2673%" height="15" fill="rgb(210,195,18)" fg:x="2826" fg:w="9"/><text x="84.1823%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::next (78 samples, 2.32%)</title><rect x="81.9127%" y="485" width="2.3166%" height="15" fill="rgb(249,80,12)" fg:x="2758" fg:w="78"/><text x="82.1627%" y="495.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::next (77 samples, 2.29%)</title><rect x="81.9424%" y="469" width="2.2869%" height="15" fill="rgb(221,65,9)" fg:x="2759" fg:w="77"/><text x="82.1924%" y="479.50">&lt;..</text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::__iterator_get_unchecked (20 samples, 0.59%)</title><rect x="83.6353%" y="453" width="0.5940%" height="15" fill="rgb(235,49,36)" fg:x="2816" fg:w="20"/><text x="83.8853%" y="463.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::as_ptr (1 samples, 0.03%)</title><rect x="84.1996%" y="437" width="0.0297%" height="15" fill="rgb(225,32,20)" fg:x="2835" fg:w="1"/><text x="84.4496%" y="447.50"></text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum::{{closure}} (28 samples, 0.83%)</title><rect x="86.7835%" y="469" width="0.8316%" height="15" fill="rgb(215,141,46)" fg:x="2922" fg:w="28"/><text x="87.0335%" y="479.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.03%)</title><rect x="87.6151%" y="469" width="0.0297%" height="15" fill="rgb(250,160,47)" fg:x="2950" fg:w="1"/><text x="87.8651%" y="479.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.03%)</title><rect x="87.6151%" y="453" width="0.0297%" height="15" fill="rgb(216,222,40)" fg:x="2950" fg:w="1"/><text x="87.8651%" y="463.50"></text></g><g><title>&lt;&amp;f64 as core::ops::arith::Mul&lt;f64&gt;&gt;::mul (29 samples, 0.86%)</title><rect x="89.6644%" y="453" width="0.8613%" height="15" fill="rgb(234,217,39)" fg:x="3019" fg:w="29"/><text x="89.9144%" y="463.50"></text></g><g><title>&lt;f64 as core::ops::arith::Mul&gt;::mul (16 samples, 0.48%)</title><rect x="90.0505%" y="437" width="0.4752%" height="15" fill="rgb(207,178,40)" fg:x="3032" fg:w="16"/><text x="90.3005%" y="447.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (4 samples, 0.12%)</title><rect x="91.5949%" y="421" width="0.1188%" height="15" fill="rgb(221,136,13)" fg:x="3084" fg:w="4"/><text x="91.8449%" y="431.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (2 samples, 0.06%)</title><rect x="91.7137%" y="389" width="0.0594%" height="15" fill="rgb(249,199,10)" fg:x="3088" fg:w="2"/><text x="91.9637%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (48 samples, 1.43%)</title><rect x="91.3276%" y="437" width="1.4256%" height="15" fill="rgb(249,222,13)" fg:x="3075" fg:w="48"/><text x="91.5776%" y="447.50"></text></g><g><title>core::slice::raw::from_raw_parts (35 samples, 1.04%)</title><rect x="91.7137%" y="421" width="1.0395%" height="15" fill="rgb(244,185,38)" fg:x="3088" fg:w="35"/><text x="91.9637%" y="431.50"></text></g><g><title>core::ptr::slice_from_raw_parts (35 samples, 1.04%)</title><rect x="91.7137%" y="405" width="1.0395%" height="15" fill="rgb(236,202,9)" fg:x="3088" fg:w="35"/><text x="91.9637%" y="415.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (33 samples, 0.98%)</title><rect x="91.7731%" y="389" width="0.9801%" height="15" fill="rgb(250,229,37)" fg:x="3090" fg:w="33"/><text x="92.0231%" y="399.50"></text></g><g><title>core::iter::traits::iterator::Iterator::sum (515 samples, 15.30%)</title><rect x="78.6457%" y="549" width="15.2955%" height="15" fill="rgb(206,174,23)" fg:x="2648" fg:w="515"/><text x="78.8957%" y="559.50">core::iter::traits::ite..</text></g><g><title>&lt;f64 as core::iter::traits::accum::Sum&gt;::sum (515 samples, 15.30%)</title><rect x="78.6457%" y="533" width="15.2955%" height="15" fill="rgb(211,33,43)" fg:x="2648" fg:w="515"/><text x="78.8957%" y="543.50">&lt;f64 as core::iter::tra..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::fold (515 samples, 15.30%)</title><rect x="78.6457%" y="517" width="15.2955%" height="15" fill="rgb(245,58,50)" fg:x="2648" fg:w="515"/><text x="78.8957%" y="527.50">&lt;core::iter::adapters::..</text></g><g><title>core::iter::traits::iterator::Iterator::fold (498 samples, 14.79%)</title><rect x="79.1506%" y="501" width="14.7906%" height="15" fill="rgb(244,68,36)" fg:x="2665" fg:w="498"/><text x="79.4006%" y="511.50">core::iter::traits::ite..</text></g><g><title>core::iter::adapters::map::map_fold::{{closure}} (327 samples, 9.71%)</title><rect x="84.2293%" y="485" width="9.7119%" height="15" fill="rgb(232,229,15)" fg:x="2836" fg:w="327"/><text x="84.4793%" y="495.50">core::iter::ad..</text></g><g><title>rust::neuron::Network::step::{{closure}} (212 samples, 6.30%)</title><rect x="87.6448%" y="469" width="6.2964%" height="15" fill="rgb(254,30,23)" fg:x="2951" fg:w="212"/><text x="87.8948%" y="479.50">rust::ne..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::index::Index&lt;I&gt;&gt;::index (115 samples, 3.42%)</title><rect x="90.5257%" y="453" width="3.4155%" height="15" fill="rgb(235,160,14)" fg:x="3048" fg:w="115"/><text x="90.7757%" y="463.50">&lt;al..</text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (40 samples, 1.19%)</title><rect x="92.7532%" y="437" width="1.1880%" height="15" fill="rgb(212,155,44)" fg:x="3123" fg:w="40"/><text x="93.0032%" y="447.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (35 samples, 1.04%)</title><rect x="92.9017%" y="421" width="1.0395%" height="15" fill="rgb(226,2,50)" fg:x="3128" fg:w="35"/><text x="93.1517%" y="431.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::as_ptr (3 samples, 0.09%)</title><rect x="94.1491%" y="501" width="0.0891%" height="15" fill="rgb(234,177,6)" fg:x="3170" fg:w="3"/><text x="94.3991%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::ptr (3 samples, 0.09%)</title><rect x="94.1491%" y="485" width="0.0891%" height="15" fill="rgb(217,24,9)" fg:x="3170" fg:w="3"/><text x="94.3991%" y="495.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::cast (2 samples, 0.06%)</title><rect x="94.2382%" y="469" width="0.0594%" height="15" fill="rgb(220,13,46)" fg:x="3173" fg:w="2"/><text x="94.4882%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::deref::Deref&gt;::deref (14 samples, 0.42%)</title><rect x="94.1491%" y="517" width="0.4158%" height="15" fill="rgb(239,221,27)" fg:x="3170" fg:w="14"/><text x="94.3991%" y="527.50"></text></g><g><title>core::slice::raw::from_raw_parts (11 samples, 0.33%)</title><rect x="94.2382%" y="501" width="0.3267%" height="15" fill="rgb(222,198,25)" fg:x="3173" fg:w="11"/><text x="94.4882%" y="511.50"></text></g><g><title>core::ptr::slice_from_raw_parts (11 samples, 0.33%)</title><rect x="94.2382%" y="485" width="0.3267%" height="15" fill="rgb(211,99,13)" fg:x="3173" fg:w="11"/><text x="94.4882%" y="495.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (9 samples, 0.27%)</title><rect x="94.2976%" y="469" width="0.2673%" height="15" fill="rgb(232,111,31)" fg:x="3175" fg:w="9"/><text x="94.5476%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (1 samples, 0.03%)</title><rect x="94.7134%" y="485" width="0.0297%" height="15" fill="rgb(245,82,37)" fg:x="3189" fg:w="1"/><text x="94.9634%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (1 samples, 0.03%)</title><rect x="94.7431%" y="485" width="0.0297%" height="15" fill="rgb(227,149,46)" fg:x="3190" fg:w="1"/><text x="94.9931%" y="495.50"></text></g><g><title>&lt;&amp;alloc::vec::Vec&lt;T,A&gt; as core::iter::traits::collect::IntoIterator&gt;::into_iter (23 samples, 0.68%)</title><rect x="94.1194%" y="533" width="0.6831%" height="15" fill="rgb(218,36,50)" fg:x="3169" fg:w="23"/><text x="94.3694%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (8 samples, 0.24%)</title><rect x="94.5649%" y="517" width="0.2376%" height="15" fill="rgb(226,80,48)" fg:x="3184" fg:w="8"/><text x="94.8149%" y="527.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (8 samples, 0.24%)</title><rect x="94.5649%" y="501" width="0.2376%" height="15" fill="rgb(238,224,15)" fg:x="3184" fg:w="8"/><text x="94.8149%" y="511.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.03%)</title><rect x="94.7728%" y="485" width="0.0297%" height="15" fill="rgb(241,136,10)" fg:x="3191" fg:w="1"/><text x="95.0228%" y="495.50"></text></g><g><title>&lt;I as core::iter::traits::collect::IntoIterator&gt;::into_iter (2 samples, 0.06%)</title><rect x="94.8025%" y="533" width="0.0594%" height="15" fill="rgb(208,32,45)" fg:x="3192" fg:w="2"/><text x="95.0525%" y="543.50"></text></g><g><title>__memcpy_avx_unaligned_erms (2 samples, 0.06%)</title><rect x="94.8025%" y="517" width="0.0594%" height="15" fill="rgb(207,135,9)" fg:x="3192" fg:w="2"/><text x="95.0525%" y="527.50"></text></g><g><title>__memcpy_avx_unaligned_erms (1 samples, 0.03%)</title><rect x="94.8619%" y="533" width="0.0297%" height="15" fill="rgb(206,86,44)" fg:x="3194" fg:w="1"/><text x="95.1119%" y="543.50"></text></g><g><title>_init (1 samples, 0.03%)</title><rect x="95.1292%" y="501" width="0.0297%" height="15" fill="rgb(245,177,15)" fg:x="3203" fg:w="1"/><text x="95.3792%" y="511.50"></text></g><g><title>core::cmp::min (25 samples, 0.74%)</title><rect x="95.1589%" y="501" width="0.7425%" height="15" fill="rgb(206,64,50)" fg:x="3204" fg:w="25"/><text x="95.4089%" y="511.50"></text></g><g><title>core::cmp::Ord::min (25 samples, 0.74%)</title><rect x="95.1589%" y="485" width="0.7425%" height="15" fill="rgb(234,36,40)" fg:x="3204" fg:w="25"/><text x="95.4089%" y="495.50"></text></g><g><title>core::cmp::min_by (22 samples, 0.65%)</title><rect x="95.2480%" y="469" width="0.6534%" height="15" fill="rgb(213,64,8)" fg:x="3207" fg:w="22"/><text x="95.4980%" y="479.50"></text></g><g><title>core::ops::function::FnOnce::call_once (11 samples, 0.33%)</title><rect x="95.5747%" y="453" width="0.3267%" height="15" fill="rgb(210,75,36)" fg:x="3218" fg:w="11"/><text x="95.8247%" y="463.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (8 samples, 0.24%)</title><rect x="95.6638%" y="437" width="0.2376%" height="15" fill="rgb(229,88,21)" fg:x="3221" fg:w="8"/><text x="95.9138%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.03%)</title><rect x="95.9905%" y="485" width="0.0297%" height="15" fill="rgb(252,204,47)" fg:x="3232" fg:w="1"/><text x="96.2405%" y="495.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.03%)</title><rect x="95.9905%" y="469" width="0.0297%" height="15" fill="rgb(208,77,27)" fg:x="3232" fg:w="1"/><text x="96.2405%" y="479.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.03%)</title><rect x="95.9905%" y="453" width="0.0297%" height="15" fill="rgb(221,76,26)" fg:x="3232" fg:w="1"/><text x="96.2405%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::size_hint (1 samples, 0.03%)</title><rect x="95.9905%" y="437" width="0.0297%" height="15" fill="rgb(225,139,18)" fg:x="3232" fg:w="1"/><text x="96.2405%" y="447.50"></text></g><g><title>core::iter::traits::iterator::Iterator::zip (99 samples, 2.94%)</title><rect x="93.9412%" y="549" width="2.9403%" height="15" fill="rgb(230,137,11)" fg:x="3163" fg:w="99"/><text x="94.1912%" y="559.50">co..</text></g><g><title>core::iter::adapters::zip::Zip&lt;A,B&gt;::new (67 samples, 1.99%)</title><rect x="94.8916%" y="533" width="1.9899%" height="15" fill="rgb(212,28,1)" fg:x="3195" fg:w="67"/><text x="95.1416%" y="543.50">c..</text></g><g><title>&lt;core::iter::adapters::zip::Zip&lt;A,B&gt; as core::iter::adapters::zip::ZipImpl&lt;A,B&gt;&gt;::new (67 samples, 1.99%)</title><rect x="94.8916%" y="517" width="1.9899%" height="15" fill="rgb(248,164,17)" fg:x="3195" fg:w="67"/><text x="95.1416%" y="527.50">&lt;..</text></g><g><title>core::iter::adapters::zip::TrustedRandomAccessNoCoerce::size (33 samples, 0.98%)</title><rect x="95.9014%" y="501" width="0.9801%" height="15" fill="rgb(222,171,42)" fg:x="3229" fg:w="33"/><text x="96.1514%" y="511.50"></text></g><g><title>&lt;core::slice::iter::Iter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (29 samples, 0.86%)</title><rect x="96.0202%" y="485" width="0.8613%" height="15" fill="rgb(243,84,45)" fg:x="3233" fg:w="29"/><text x="96.2702%" y="495.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::sub_ptr (10 samples, 0.30%)</title><rect x="96.5845%" y="469" width="0.2970%" height="15" fill="rgb(252,49,23)" fg:x="3252" fg:w="10"/><text x="96.8345%" y="479.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::sub_ptr (7 samples, 0.21%)</title><rect x="96.6736%" y="453" width="0.2079%" height="15" fill="rgb(215,19,7)" fg:x="3255" fg:w="7"/><text x="96.9236%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;f64&gt;&gt; (1 samples, 0.03%)</title><rect x="96.8815%" y="549" width="0.0297%" height="15" fill="rgb(238,81,41)" fg:x="3262" fg:w="1"/><text x="97.1315%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;f64&gt;&gt; (1 samples, 0.03%)</title><rect x="96.8815%" y="533" width="0.0297%" height="15" fill="rgb(210,199,37)" fg:x="3262" fg:w="1"/><text x="97.1315%" y="543.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.03%)</title><rect x="96.8815%" y="517" width="0.0297%" height="15" fill="rgb(244,192,49)" fg:x="3262" fg:w="1"/><text x="97.1315%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.03%)</title><rect x="96.8815%" y="501" width="0.0297%" height="15" fill="rgb(226,211,11)" fg:x="3262" fg:w="1"/><text x="97.1315%" y="511.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::add (3 samples, 0.09%)</title><rect x="97.2676%" y="517" width="0.0891%" height="15" fill="rgb(236,162,54)" fg:x="3275" fg:w="3"/><text x="97.5176%" y="527.50"></text></g><g><title>core::ptr::non_null::NonNull&lt;T&gt;::new_unchecked (3 samples, 0.09%)</title><rect x="97.3567%" y="517" width="0.0891%" height="15" fill="rgb(220,229,9)" fg:x="3278" fg:w="3"/><text x="97.6067%" y="527.50"></text></g><g><title>rust::neuron::Network::run (2,903 samples, 86.22%)</title><rect x="11.2563%" y="581" width="86.2192%" height="15" fill="rgb(250,87,22)" fg:x="379" fg:w="2903"/><text x="11.5063%" y="591.50">rust::neuron::Network::run</text></g><g><title>rust::neuron::Network::step (2,903 samples, 86.22%)</title><rect x="11.2563%" y="565" width="86.2192%" height="15" fill="rgb(239,43,17)" fg:x="379" fg:w="2903"/><text x="11.5063%" y="575.50">rust::neuron::Network::step</text></g><g><title>core::slice::&lt;impl [T]&gt;::iter (19 samples, 0.56%)</title><rect x="96.9112%" y="549" width="0.5643%" height="15" fill="rgb(231,177,25)" fg:x="3263" fg:w="19"/><text x="97.1612%" y="559.50"></text></g><g><title>core::slice::iter::Iter&lt;T&gt;::new (12 samples, 0.36%)</title><rect x="97.1191%" y="533" width="0.3564%" height="15" fill="rgb(219,179,1)" fg:x="3270" fg:w="12"/><text x="97.3691%" y="543.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::as_ptr (1 samples, 0.03%)</title><rect x="97.4458%" y="517" width="0.0297%" height="15" fill="rgb(238,219,53)" fg:x="3281" fg:w="1"/><text x="97.6958%" y="527.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::next_char (1 samples, 0.03%)</title><rect x="97.5943%" y="389" width="0.0297%" height="15" fill="rgb(232,167,36)" fg:x="3286" fg:w="1"/><text x="97.8443%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::next (1 samples, 0.03%)</title><rect x="97.5943%" y="373" width="0.0297%" height="15" fill="rgb(244,19,51)" fg:x="3286" fg:w="1"/><text x="97.8443%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::eat_char (1 samples, 0.03%)</title><rect x="97.8913%" y="357" width="0.0297%" height="15" fill="rgb(224,6,22)" fg:x="3296" fg:w="1"/><text x="98.1413%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::f64_from_parts (1 samples, 0.03%)</title><rect x="97.9210%" y="357" width="0.0297%" height="15" fill="rgb(224,145,5)" fg:x="3297" fg:w="1"/><text x="98.1710%" y="367.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (4 samples, 0.12%)</title><rect x="98.3962%" y="261" width="0.1188%" height="15" fill="rgb(234,130,49)" fg:x="3313" fg:w="4"/><text x="98.6462%" y="271.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (4 samples, 0.12%)</title><rect x="98.3962%" y="245" width="0.1188%" height="15" fill="rgb(254,6,2)" fg:x="3313" fg:w="4"/><text x="98.6462%" y="255.50"></text></g><g><title>core::cmp::min (4 samples, 0.12%)</title><rect x="98.3962%" y="229" width="0.1188%" height="15" fill="rgb(208,96,46)" fg:x="3313" fg:w="4"/><text x="98.6462%" y="239.50"></text></g><g><title>core::cmp::Ord::min (4 samples, 0.12%)</title><rect x="98.3962%" y="213" width="0.1188%" height="15" fill="rgb(239,3,39)" fg:x="3313" fg:w="4"/><text x="98.6462%" y="223.50"></text></g><g><title>core::cmp::min_by (4 samples, 0.12%)</title><rect x="98.3962%" y="197" width="0.1188%" height="15" fill="rgb(233,210,1)" fg:x="3313" fg:w="4"/><text x="98.6462%" y="207.50"></text></g><g><title>core::ops::function::FnOnce::call_once (3 samples, 0.09%)</title><rect x="98.4259%" y="181" width="0.0891%" height="15" fill="rgb(244,137,37)" fg:x="3314" fg:w="3"/><text x="98.6759%" y="191.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (3 samples, 0.09%)</title><rect x="98.4259%" y="165" width="0.0891%" height="15" fill="rgb(240,136,2)" fg:x="3314" fg:w="3"/><text x="98.6759%" y="175.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.06%)</title><rect x="98.5150%" y="261" width="0.0594%" height="15" fill="rgb(239,18,37)" fg:x="3317" fg:w="2"/><text x="98.7650%" y="271.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.06%)</title><rect x="98.5150%" y="245" width="0.0594%" height="15" fill="rgb(218,185,22)" fg:x="3317" fg:w="2"/><text x="98.7650%" y="255.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (1 samples, 0.03%)</title><rect x="98.5447%" y="229" width="0.0297%" height="15" fill="rgb(225,218,4)" fg:x="3318" fg:w="1"/><text x="98.7947%" y="239.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="98.5447%" y="213" width="0.0297%" height="15" fill="rgb(230,182,32)" fg:x="3318" fg:w="1"/><text x="98.7947%" y="223.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_unchecked (1 samples, 0.03%)</title><rect x="98.5447%" y="197" width="0.0297%" height="15" fill="rgb(242,56,43)" fg:x="3318" fg:w="1"/><text x="98.7947%" y="207.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="98.5447%" y="181" width="0.0297%" height="15" fill="rgb(233,99,24)" fg:x="3318" fg:w="1"/><text x="98.7947%" y="191.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="98.5447%" y="165" width="0.0297%" height="15" fill="rgb(234,209,42)" fg:x="3318" fg:w="1"/><text x="98.7947%" y="175.50"></text></g><g><title>core::cmp::min (1 samples, 0.03%)</title><rect x="98.6041%" y="245" width="0.0297%" height="15" fill="rgb(227,7,12)" fg:x="3320" fg:w="1"/><text x="98.8541%" y="255.50"></text></g><g><title>core::cmp::Ord::min (1 samples, 0.03%)</title><rect x="98.6041%" y="229" width="0.0297%" height="15" fill="rgb(245,203,43)" fg:x="3320" fg:w="1"/><text x="98.8541%" y="239.50"></text></g><g><title>core::cmp::min_by (1 samples, 0.03%)</title><rect x="98.6041%" y="213" width="0.0297%" height="15" fill="rgb(238,205,33)" fg:x="3320" fg:w="1"/><text x="98.8541%" y="223.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="98.6041%" y="197" width="0.0297%" height="15" fill="rgb(231,56,7)" fg:x="3320" fg:w="1"/><text x="98.8541%" y="207.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="98.6041%" y="181" width="0.0297%" height="15" fill="rgb(244,186,29)" fg:x="3320" fg:w="1"/><text x="98.8541%" y="191.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_number (35 samples, 1.04%)</title><rect x="97.6240%" y="389" width="1.0395%" height="15" fill="rgb(234,111,31)" fg:x="3287" fg:w="35"/><text x="97.8740%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_decimal (34 samples, 1.01%)</title><rect x="97.6537%" y="373" width="1.0098%" height="15" fill="rgb(241,149,10)" fg:x="3288" fg:w="34"/><text x="97.9037%" y="383.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (24 samples, 0.71%)</title><rect x="97.9507%" y="357" width="0.7128%" height="15" fill="rgb(249,206,44)" fg:x="3298" fg:w="24"/><text x="98.2007%" y="367.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (23 samples, 0.68%)</title><rect x="97.9804%" y="341" width="0.6831%" height="15" fill="rgb(251,153,30)" fg:x="3299" fg:w="23"/><text x="98.2304%" y="351.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (23 samples, 0.68%)</title><rect x="97.9804%" y="325" width="0.6831%" height="15" fill="rgb(239,152,38)" fg:x="3299" fg:w="23"/><text x="98.2304%" y="335.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (20 samples, 0.59%)</title><rect x="98.0695%" y="309" width="0.5940%" height="15" fill="rgb(249,139,47)" fg:x="3302" fg:w="20"/><text x="98.3195%" y="319.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (16 samples, 0.48%)</title><rect x="98.1883%" y="293" width="0.4752%" height="15" fill="rgb(244,64,35)" fg:x="3306" fg:w="16"/><text x="98.4383%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.30%)</title><rect x="98.3665%" y="277" width="0.2970%" height="15" fill="rgb(216,46,15)" fg:x="3312" fg:w="10"/><text x="98.6165%" y="287.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (3 samples, 0.09%)</title><rect x="98.5744%" y="261" width="0.0891%" height="15" fill="rgb(250,74,19)" fg:x="3319" fg:w="3"/><text x="98.8244%" y="271.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at (1 samples, 0.03%)</title><rect x="98.6338%" y="245" width="0.0297%" height="15" fill="rgb(249,42,33)" fg:x="3321" fg:w="1"/><text x="98.8838%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::split_at_unchecked (1 samples, 0.03%)</title><rect x="98.6338%" y="229" width="0.0297%" height="15" fill="rgb(242,149,17)" fg:x="3321" fg:w="1"/><text x="98.8838%" y="239.50"></text></g><g><title>core::slice::raw::from_raw_parts (1 samples, 0.03%)</title><rect x="98.6338%" y="213" width="0.0297%" height="15" fill="rgb(244,29,21)" fg:x="3321" fg:w="1"/><text x="98.8838%" y="223.50"></text></g><g><title>core::ptr::slice_from_raw_parts (1 samples, 0.03%)</title><rect x="98.6338%" y="197" width="0.0297%" height="15" fill="rgb(220,130,37)" fg:x="3321" fg:w="1"/><text x="98.8838%" y="207.50"></text></g><g><title>core::ptr::metadata::from_raw_parts (1 samples, 0.03%)</title><rect x="98.6338%" y="181" width="0.0297%" height="15" fill="rgb(211,67,2)" fg:x="3321" fg:w="1"/><text x="98.8838%" y="191.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="98.7823%" y="293" width="0.0297%" height="15" fill="rgb(235,68,52)" fg:x="3326" fg:w="1"/><text x="99.0323%" y="303.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (2 samples, 0.06%)</title><rect x="98.8120%" y="293" width="0.0594%" height="15" fill="rgb(246,142,3)" fg:x="3327" fg:w="2"/><text x="99.0620%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (2 samples, 0.06%)</title><rect x="98.8120%" y="277" width="0.0594%" height="15" fill="rgb(241,25,7)" fg:x="3327" fg:w="2"/><text x="99.0620%" y="287.50"></text></g><g><title>core::cmp::min (2 samples, 0.06%)</title><rect x="98.8120%" y="261" width="0.0594%" height="15" fill="rgb(242,119,39)" fg:x="3327" fg:w="2"/><text x="99.0620%" y="271.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.06%)</title><rect x="98.8120%" y="245" width="0.0594%" height="15" fill="rgb(241,98,45)" fg:x="3327" fg:w="2"/><text x="99.0620%" y="255.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.06%)</title><rect x="98.8120%" y="229" width="0.0594%" height="15" fill="rgb(254,28,30)" fg:x="3327" fg:w="2"/><text x="99.0620%" y="239.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.06%)</title><rect x="98.8120%" y="213" width="0.0594%" height="15" fill="rgb(241,142,54)" fg:x="3327" fg:w="2"/><text x="99.0620%" y="223.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="98.8417%" y="197" width="0.0297%" height="15" fill="rgb(222,85,15)" fg:x="3328" fg:w="1"/><text x="99.0917%" y="207.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (2 samples, 0.06%)</title><rect x="98.8714%" y="293" width="0.0594%" height="15" fill="rgb(210,85,47)" fg:x="3329" fg:w="2"/><text x="99.1214%" y="303.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (2 samples, 0.06%)</title><rect x="98.8714%" y="277" width="0.0594%" height="15" fill="rgb(224,206,25)" fg:x="3329" fg:w="2"/><text x="99.1214%" y="287.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (2 samples, 0.06%)</title><rect x="98.8714%" y="261" width="0.0594%" height="15" fill="rgb(243,201,19)" fg:x="3329" fg:w="2"/><text x="99.1214%" y="271.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_integer (48 samples, 1.43%)</title><rect x="97.5943%" y="405" width="1.4256%" height="15" fill="rgb(236,59,4)" fg:x="3286" fg:w="48"/><text x="97.8443%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek_or_null (12 samples, 0.36%)</title><rect x="98.6635%" y="389" width="0.3564%" height="15" fill="rgb(254,179,45)" fg:x="3322" fg:w="12"/><text x="98.9135%" y="399.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (12 samples, 0.36%)</title><rect x="98.6635%" y="373" width="0.3564%" height="15" fill="rgb(226,14,10)" fg:x="3322" fg:w="12"/><text x="98.9135%" y="383.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (12 samples, 0.36%)</title><rect x="98.6635%" y="357" width="0.3564%" height="15" fill="rgb(244,27,41)" fg:x="3322" fg:w="12"/><text x="98.9135%" y="367.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (11 samples, 0.33%)</title><rect x="98.6932%" y="341" width="0.3267%" height="15" fill="rgb(235,35,32)" fg:x="3323" fg:w="11"/><text x="98.9432%" y="351.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (10 samples, 0.30%)</title><rect x="98.7229%" y="325" width="0.2970%" height="15" fill="rgb(218,68,31)" fg:x="3324" fg:w="10"/><text x="98.9729%" y="335.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (10 samples, 0.30%)</title><rect x="98.7229%" y="309" width="0.2970%" height="15" fill="rgb(207,120,37)" fg:x="3324" fg:w="10"/><text x="98.9729%" y="319.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (3 samples, 0.09%)</title><rect x="98.9308%" y="293" width="0.0891%" height="15" fill="rgb(227,98,0)" fg:x="3331" fg:w="3"/><text x="99.1808%" y="303.50"></text></g><g><title>core::cmp::min (2 samples, 0.06%)</title><rect x="98.9605%" y="277" width="0.0594%" height="15" fill="rgb(207,7,3)" fg:x="3332" fg:w="2"/><text x="99.2105%" y="287.50"></text></g><g><title>core::cmp::Ord::min (2 samples, 0.06%)</title><rect x="98.9605%" y="261" width="0.0594%" height="15" fill="rgb(206,98,19)" fg:x="3332" fg:w="2"/><text x="99.2105%" y="271.50"></text></g><g><title>core::cmp::min_by (2 samples, 0.06%)</title><rect x="98.9605%" y="245" width="0.0594%" height="15" fill="rgb(217,5,26)" fg:x="3332" fg:w="2"/><text x="99.2105%" y="255.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (3 samples, 0.09%)</title><rect x="99.0199%" y="405" width="0.0891%" height="15" fill="rgb(235,190,38)" fg:x="3334" fg:w="3"/><text x="99.2699%" y="415.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (1 samples, 0.03%)</title><rect x="99.0793%" y="389" width="0.0297%" height="15" fill="rgb(247,86,24)" fg:x="3336" fg:w="1"/><text x="99.3293%" y="399.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (1 samples, 0.03%)</title><rect x="99.0793%" y="373" width="0.0297%" height="15" fill="rgb(205,101,16)" fg:x="3336" fg:w="1"/><text x="99.3293%" y="383.50"></text></g><g><title>&lt;core::marker::PhantomData&lt;T&gt; as serde::de::DeserializeSeed&gt;::deserialize (53 samples, 1.57%)</title><rect x="97.5646%" y="469" width="1.5741%" height="15" fill="rgb(246,168,33)" fg:x="3285" fg:w="53"/><text x="97.8146%" y="479.50"></text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for f64&gt;::deserialize (53 samples, 1.57%)</title><rect x="97.5646%" y="453" width="1.5741%" height="15" fill="rgb(231,114,1)" fg:x="3285" fg:w="53"/><text x="97.8146%" y="463.50"></text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_f64 (53 samples, 1.57%)</title><rect x="97.5646%" y="437" width="1.5741%" height="15" fill="rgb(207,184,53)" fg:x="3285" fg:w="53"/><text x="97.8146%" y="447.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::deserialize_number (53 samples, 1.57%)</title><rect x="97.5646%" y="421" width="1.5741%" height="15" fill="rgb(224,95,51)" fg:x="3285" fg:w="53"/><text x="97.8146%" y="431.50"></text></g><g><title>serde_json::de::ParserNumber::visit (1 samples, 0.03%)</title><rect x="99.1090%" y="405" width="0.0297%" height="15" fill="rgb(212,188,45)" fg:x="3337" fg:w="1"/><text x="99.3590%" y="415.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (1 samples, 0.03%)</title><rect x="99.5545%" y="373" width="0.0297%" height="15" fill="rgb(223,154,38)" fg:x="3352" fg:w="1"/><text x="99.8045%" y="383.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::consume (5 samples, 0.15%)</title><rect x="99.5842%" y="373" width="0.1485%" height="15" fill="rgb(251,22,52)" fg:x="3353" fg:w="5"/><text x="99.8342%" y="383.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::consume (5 samples, 0.15%)</title><rect x="99.5842%" y="357" width="0.1485%" height="15" fill="rgb(229,209,22)" fg:x="3353" fg:w="5"/><text x="99.8342%" y="367.50"></text></g><g><title>core::cmp::min (5 samples, 0.15%)</title><rect x="99.5842%" y="341" width="0.1485%" height="15" fill="rgb(234,138,34)" fg:x="3353" fg:w="5"/><text x="99.8342%" y="351.50"></text></g><g><title>core::cmp::Ord::min (5 samples, 0.15%)</title><rect x="99.5842%" y="325" width="0.1485%" height="15" fill="rgb(212,95,11)" fg:x="3353" fg:w="5"/><text x="99.8342%" y="335.50"></text></g><g><title>core::cmp::min_by (5 samples, 0.15%)</title><rect x="99.5842%" y="309" width="0.1485%" height="15" fill="rgb(240,179,47)" fg:x="3353" fg:w="5"/><text x="99.8342%" y="319.50"></text></g><g><title>core::ops::function::FnOnce::call_once (1 samples, 0.03%)</title><rect x="99.7030%" y="293" width="0.0297%" height="15" fill="rgb(240,163,11)" fg:x="3357" fg:w="1"/><text x="99.9530%" y="303.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (1 samples, 0.03%)</title><rect x="99.7030%" y="277" width="0.0297%" height="15" fill="rgb(236,37,12)" fg:x="3357" fg:w="1"/><text x="99.9530%" y="287.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::BufRead&gt;::fill_buf (1 samples, 0.03%)</title><rect x="99.7327%" y="373" width="0.0297%" height="15" fill="rgb(232,164,16)" fg:x="3358" fg:w="1"/><text x="99.9827%" y="383.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::fill_buf (1 samples, 0.03%)</title><rect x="99.7327%" y="357" width="0.0297%" height="15" fill="rgb(244,205,15)" fg:x="3358" fg:w="1"/><text x="99.9827%" y="367.50"></text></g><g><title>std::io::buffered::bufreader::buffer::Buffer::buffer (1 samples, 0.03%)</title><rect x="99.7327%" y="341" width="0.0297%" height="15" fill="rgb(223,117,47)" fg:x="3358" fg:w="1"/><text x="99.9827%" y="351.50"></text></g><g><title>__libc_start_main_impl (2,994 samples, 88.92%)</title><rect x="10.9593%" y="853" width="88.9219%" height="15" fill="rgb(244,107,35)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="863.50">__libc_start_main_impl</text></g><g><title>__libc_start_call_main (2,994 samples, 88.92%)</title><rect x="10.9593%" y="837" width="88.9219%" height="15" fill="rgb(205,140,8)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="847.50">__libc_start_call_main</text></g><g><title>main (2,994 samples, 88.92%)</title><rect x="10.9593%" y="821" width="88.9219%" height="15" fill="rgb(228,84,46)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="831.50">main</text></g><g><title>std::rt::lang_start (2,994 samples, 88.92%)</title><rect x="10.9593%" y="805" width="88.9219%" height="15" fill="rgb(254,188,9)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="815.50">std::rt::lang_start</text></g><g><title>std::rt::lang_start_internal (2,994 samples, 88.92%)</title><rect x="10.9593%" y="789" width="88.9219%" height="15" fill="rgb(206,112,54)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="799.50">std::rt::lang_start_internal</text></g><g><title>std::panic::catch_unwind (2,994 samples, 88.92%)</title><rect x="10.9593%" y="773" width="88.9219%" height="15" fill="rgb(216,84,49)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="783.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,994 samples, 88.92%)</title><rect x="10.9593%" y="757" width="88.9219%" height="15" fill="rgb(214,194,35)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="767.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,994 samples, 88.92%)</title><rect x="10.9593%" y="741" width="88.9219%" height="15" fill="rgb(249,28,3)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="751.50">std::panicking::try::do_call</text></g><g><title>std::rt::lang_start_internal::{{closure}} (2,994 samples, 88.92%)</title><rect x="10.9593%" y="725" width="88.9219%" height="15" fill="rgb(222,56,52)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="735.50">std::rt::lang_start_internal::{{closure}}</text></g><g><title>std::panic::catch_unwind (2,994 samples, 88.92%)</title><rect x="10.9593%" y="709" width="88.9219%" height="15" fill="rgb(245,217,50)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="719.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (2,994 samples, 88.92%)</title><rect x="10.9593%" y="693" width="88.9219%" height="15" fill="rgb(213,201,24)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="703.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (2,994 samples, 88.92%)</title><rect x="10.9593%" y="677" width="88.9219%" height="15" fill="rgb(248,116,28)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="687.50">std::panicking::try::do_call</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (2,994 samples, 88.92%)</title><rect x="10.9593%" y="661" width="88.9219%" height="15" fill="rgb(219,72,43)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="671.50">core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once</text></g><g><title>std::rt::lang_start::{{closure}} (2,994 samples, 88.92%)</title><rect x="10.9593%" y="645" width="88.9219%" height="15" fill="rgb(209,138,14)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="655.50">std::rt::lang_start::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (2,994 samples, 88.92%)</title><rect x="10.9593%" y="629" width="88.9219%" height="15" fill="rgb(222,18,33)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="639.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>core::ops::function::FnOnce::call_once (2,994 samples, 88.92%)</title><rect x="10.9593%" y="613" width="88.9219%" height="15" fill="rgb(213,199,7)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="623.50">core::ops::function::FnOnce::call_once</text></g><g><title>rust::main (2,994 samples, 88.92%)</title><rect x="10.9593%" y="597" width="88.9219%" height="15" fill="rgb(250,110,10)" fg:x="369" fg:w="2994"/><text x="11.2093%" y="607.50">rust::main</text></g><g><title>serde_json::de::from_reader (81 samples, 2.41%)</title><rect x="97.4755%" y="581" width="2.4057%" height="15" fill="rgb(248,123,6)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="591.50">se..</text></g><g><title>serde_json::de::from_trait (81 samples, 2.41%)</title><rect x="97.4755%" y="565" width="2.4057%" height="15" fill="rgb(206,91,31)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="575.50">se..</text></g><g><title>serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize (81 samples, 2.41%)</title><rect x="97.4755%" y="549" width="2.4057%" height="15" fill="rgb(211,154,13)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="559.50">se..</text></g><g><title>&lt;&amp;mut serde_json::de::Deserializer&lt;R&gt; as serde::de::Deserializer&gt;::deserialize_seq (81 samples, 2.41%)</title><rect x="97.4755%" y="533" width="2.4057%" height="15" fill="rgb(225,148,7)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="543.50">&lt;&amp;..</text></g><g><title>&lt;serde::de::impls::&lt;impl serde::de::Deserialize for alloc::vec::Vec&lt;T&gt;&gt;::deserialize::VecVisitor&lt;T&gt; as serde::de::Visitor&gt;::visit_seq (81 samples, 2.41%)</title><rect x="97.4755%" y="517" width="2.4057%" height="15" fill="rgb(220,160,43)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="527.50">&lt;s..</text></g><g><title>serde::de::SeqAccess::next_element (81 samples, 2.41%)</title><rect x="97.4755%" y="501" width="2.4057%" height="15" fill="rgb(213,52,39)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="511.50">se..</text></g><g><title>&lt;serde_json::de::SeqAccess&lt;R&gt; as serde::de::SeqAccess&gt;::next_element_seed (81 samples, 2.41%)</title><rect x="97.4755%" y="485" width="2.4057%" height="15" fill="rgb(243,137,7)" fg:x="3282" fg:w="81"/><text x="97.7255%" y="495.50">&lt;s..</text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::parse_whitespace (25 samples, 0.74%)</title><rect x="99.1387%" y="469" width="0.7425%" height="15" fill="rgb(230,79,13)" fg:x="3338" fg:w="25"/><text x="99.3887%" y="479.50"></text></g><g><title>serde_json::de::Deserializer&lt;R&gt;::peek (21 samples, 0.62%)</title><rect x="99.2575%" y="453" width="0.6237%" height="15" fill="rgb(247,105,23)" fg:x="3342" fg:w="21"/><text x="99.5075%" y="463.50"></text></g><g><title>&lt;serde_json::read::IoRead&lt;R&gt; as serde_json::read::Read&gt;::peek (21 samples, 0.62%)</title><rect x="99.2575%" y="437" width="0.6237%" height="15" fill="rgb(223,179,41)" fg:x="3342" fg:w="21"/><text x="99.5075%" y="447.50"></text></g><g><title>&lt;serde_json::iter::LineColIterator&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::next (19 samples, 0.56%)</title><rect x="99.3169%" y="421" width="0.5643%" height="15" fill="rgb(218,9,34)" fg:x="3344" fg:w="19"/><text x="99.5669%" y="431.50"></text></g><g><title>&lt;std::io::Bytes&lt;R&gt; as core::iter::traits::iterator::Iterator&gt;::next (18 samples, 0.53%)</title><rect x="99.3466%" y="405" width="0.5346%" height="15" fill="rgb(222,106,8)" fg:x="3345" fg:w="18"/><text x="99.5966%" y="415.50"></text></g><g><title>&lt;std::io::buffered::bufreader::BufReader&lt;R&gt; as std::io::Read&gt;::read (16 samples, 0.48%)</title><rect x="99.4060%" y="389" width="0.4752%" height="15" fill="rgb(211,220,0)" fg:x="3347" fg:w="16"/><text x="99.6560%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;[u8]&gt;::read (4 samples, 0.12%)</title><rect x="99.7624%" y="373" width="0.1188%" height="15" fill="rgb(229,52,16)" fg:x="3359" fg:w="4"/><text x="100.0124%" y="383.50"></text></g><g><title>core::cmp::min (3 samples, 0.09%)</title><rect x="99.7921%" y="357" width="0.0891%" height="15" fill="rgb(212,155,18)" fg:x="3360" fg:w="3"/><text x="100.0421%" y="367.50"></text></g><g><title>core::cmp::Ord::min (3 samples, 0.09%)</title><rect x="99.7921%" y="341" width="0.0891%" height="15" fill="rgb(242,21,14)" fg:x="3360" fg:w="3"/><text x="100.0421%" y="351.50"></text></g><g><title>core::cmp::min_by (3 samples, 0.09%)</title><rect x="99.7921%" y="325" width="0.0891%" height="15" fill="rgb(222,19,48)" fg:x="3360" fg:w="3"/><text x="100.0421%" y="335.50"></text></g><g><title>core::ops::function::FnOnce::call_once (2 samples, 0.06%)</title><rect x="99.8218%" y="309" width="0.0594%" height="15" fill="rgb(232,45,27)" fg:x="3361" fg:w="2"/><text x="100.0718%" y="319.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::Ord for usize&gt;::cmp (2 samples, 0.06%)</title><rect x="99.8218%" y="293" width="0.0594%" height="15" fill="rgb(249,103,42)" fg:x="3361" fg:w="2"/><text x="100.0718%" y="303.50"></text></g><g><title>_start (2,995 samples, 88.95%)</title><rect x="10.9593%" y="869" width="88.9516%" height="15" fill="rgb(246,81,33)" fg:x="369" fg:w="2995"/><text x="11.2093%" y="879.50">_start</text></g><g><title>_dl_start (1 samples, 0.03%)</title><rect x="99.8812%" y="853" width="0.0297%" height="15" fill="rgb(252,33,42)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="863.50"></text></g><g><title>_dl_start_final (1 samples, 0.03%)</title><rect x="99.8812%" y="837" width="0.0297%" height="15" fill="rgb(209,212,41)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="847.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.03%)</title><rect x="99.8812%" y="821" width="0.0297%" height="15" fill="rgb(207,154,6)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="831.50"></text></g><g><title>dl_main (1 samples, 0.03%)</title><rect x="99.8812%" y="805" width="0.0297%" height="15" fill="rgb(223,64,47)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="815.50"></text></g><g><title>_dl_receive_error (1 samples, 0.03%)</title><rect x="99.8812%" y="789" width="0.0297%" height="15" fill="rgb(211,161,38)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="799.50"></text></g><g><title>version_check_doit (1 samples, 0.03%)</title><rect x="99.8812%" y="773" width="0.0297%" height="15" fill="rgb(219,138,40)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="783.50"></text></g><g><title>_dl_check_all_versions (1 samples, 0.03%)</title><rect x="99.8812%" y="757" width="0.0297%" height="15" fill="rgb(241,228,46)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="767.50"></text></g><g><title>_dl_check_map_versions (1 samples, 0.03%)</title><rect x="99.8812%" y="741" width="0.0297%" height="15" fill="rgb(223,209,38)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="751.50"></text></g><g><title>match_symbol (1 samples, 0.03%)</title><rect x="99.8812%" y="725" width="0.0297%" height="15" fill="rgb(236,164,45)" fg:x="3363" fg:w="1"/><text x="100.1312%" y="735.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.03%)</title><rect x="99.9109%" y="869" width="0.0297%" height="15" fill="rgb(231,15,5)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="879.50"></text></g><g><title>do_syscall_64 (1 samples, 0.03%)</title><rect x="99.9109%" y="853" width="0.0297%" height="15" fill="rgb(252,35,15)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="863.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.03%)</title><rect x="99.9109%" y="837" width="0.0297%" height="15" fill="rgb(248,181,18)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="847.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.03%)</title><rect x="99.9109%" y="821" width="0.0297%" height="15" fill="rgb(233,39,42)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="831.50"></text></g><g><title>bprm_execve (1 samples, 0.03%)</title><rect x="99.9109%" y="805" width="0.0297%" height="15" fill="rgb(238,110,33)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="815.50"></text></g><g><title>load_elf_binary (1 samples, 0.03%)</title><rect x="99.9109%" y="789" width="0.0297%" height="15" fill="rgb(233,195,10)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="799.50"></text></g><g><title>setup_arg_pages (1 samples, 0.03%)</title><rect x="99.9109%" y="773" width="0.0297%" height="15" fill="rgb(254,105,3)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="783.50"></text></g><g><title>shift_arg_pages (1 samples, 0.03%)</title><rect x="99.9109%" y="757" width="0.0297%" height="15" fill="rgb(221,225,9)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="767.50"></text></g><g><title>__vma_adjust (1 samples, 0.03%)</title><rect x="99.9109%" y="741" width="0.0297%" height="15" fill="rgb(224,227,45)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="751.50"></text></g><g><title>mas_store_prealloc (1 samples, 0.03%)</title><rect x="99.9109%" y="725" width="0.0297%" height="15" fill="rgb(229,198,43)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="735.50"></text></g><g><title>mas_destroy (1 samples, 0.03%)</title><rect x="99.9109%" y="709" width="0.0297%" height="15" fill="rgb(206,209,35)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="719.50"></text></g><g><title>kmem_cache_free_bulk.part.0 (1 samples, 0.03%)</title><rect x="99.9109%" y="693" width="0.0297%" height="15" fill="rgb(245,195,53)" fg:x="3364" fg:w="1"/><text x="100.1609%" y="703.50"></text></g><g><title>all (3,367 samples, 100%)</title><rect x="0.0000%" y="901" width="100.0000%" height="15" fill="rgb(240,92,26)" fg:x="0" fg:w="3367"/><text x="0.2500%" y="911.50"></text></g><g><title>rust (3,362 samples, 99.85%)</title><rect x="0.1485%" y="885" width="99.8515%" height="15" fill="rgb(207,40,23)" fg:x="5" fg:w="3362"/><text x="0.3985%" y="895.50">rust</text></g><g><title>rust::neuron::Network::step::{{closure}} (2 samples, 0.06%)</title><rect x="99.9406%" y="869" width="0.0594%" height="15" fill="rgb(223,111,35)" fg:x="3365" fg:w="2"/><text x="100.1906%" y="879.50"></text></g></svg></svg>